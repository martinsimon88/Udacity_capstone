# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_vsp_g', [dirname(__file__)])
        except ImportError:
            import _vsp_g
            return _vsp_g
        if fp is not None:
            try:
                _mod = imp.load_module('_vsp_g', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _vsp_g = swig_import_helper()
    del swig_import_helper
else:
    import _vsp_g
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vsp_g.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _vsp_g.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _vsp_g.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _vsp_g.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _vsp_g.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _vsp_g.SwigPyIterator_equal(self, x)

    def copy(self):
        return _vsp_g.SwigPyIterator_copy(self)

    def next(self):
        return _vsp_g.SwigPyIterator_next(self)

    def __next__(self):
        return _vsp_g.SwigPyIterator___next__(self)

    def previous(self):
        return _vsp_g.SwigPyIterator_previous(self)

    def advance(self, n):
        return _vsp_g.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _vsp_g.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _vsp_g.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _vsp_g.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _vsp_g.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _vsp_g.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _vsp_g.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _vsp_g.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _vsp_g.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vsp_g.IntVector___nonzero__(self)

    def __bool__(self):
        return _vsp_g.IntVector___bool__(self)

    def __len__(self):
        return _vsp_g.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _vsp_g.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vsp_g.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vsp_g.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vsp_g.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vsp_g.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vsp_g.IntVector___setitem__(self, *args)

    def pop(self):
        return _vsp_g.IntVector_pop(self)

    def append(self, x):
        return _vsp_g.IntVector_append(self, x)

    def empty(self):
        return _vsp_g.IntVector_empty(self)

    def size(self):
        return _vsp_g.IntVector_size(self)

    def swap(self, v):
        return _vsp_g.IntVector_swap(self, v)

    def begin(self):
        return _vsp_g.IntVector_begin(self)

    def end(self):
        return _vsp_g.IntVector_end(self)

    def rbegin(self):
        return _vsp_g.IntVector_rbegin(self)

    def rend(self):
        return _vsp_g.IntVector_rend(self)

    def clear(self):
        return _vsp_g.IntVector_clear(self)

    def get_allocator(self):
        return _vsp_g.IntVector_get_allocator(self)

    def pop_back(self):
        return _vsp_g.IntVector_pop_back(self)

    def erase(self, *args):
        return _vsp_g.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _vsp_g.new_IntVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _vsp_g.IntVector_push_back(self, x)

    def front(self):
        return _vsp_g.IntVector_front(self)

    def back(self):
        return _vsp_g.IntVector_back(self)

    def assign(self, n, x):
        return _vsp_g.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _vsp_g.IntVector_resize(self, *args)

    def insert(self, *args):
        return _vsp_g.IntVector_insert(self, *args)

    def reserve(self, n):
        return _vsp_g.IntVector_reserve(self, n)

    def capacity(self):
        return _vsp_g.IntVector_capacity(self)
    __swig_destroy__ = _vsp_g.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _vsp_g.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _vsp_g.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vsp_g.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _vsp_g.DoubleVector___bool__(self)

    def __len__(self):
        return _vsp_g.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _vsp_g.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vsp_g.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vsp_g.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vsp_g.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vsp_g.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vsp_g.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _vsp_g.DoubleVector_pop(self)

    def append(self, x):
        return _vsp_g.DoubleVector_append(self, x)

    def empty(self):
        return _vsp_g.DoubleVector_empty(self)

    def size(self):
        return _vsp_g.DoubleVector_size(self)

    def swap(self, v):
        return _vsp_g.DoubleVector_swap(self, v)

    def begin(self):
        return _vsp_g.DoubleVector_begin(self)

    def end(self):
        return _vsp_g.DoubleVector_end(self)

    def rbegin(self):
        return _vsp_g.DoubleVector_rbegin(self)

    def rend(self):
        return _vsp_g.DoubleVector_rend(self)

    def clear(self):
        return _vsp_g.DoubleVector_clear(self)

    def get_allocator(self):
        return _vsp_g.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _vsp_g.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _vsp_g.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _vsp_g.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _vsp_g.DoubleVector_push_back(self, x)

    def front(self):
        return _vsp_g.DoubleVector_front(self)

    def back(self):
        return _vsp_g.DoubleVector_back(self)

    def assign(self, n, x):
        return _vsp_g.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _vsp_g.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _vsp_g.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _vsp_g.DoubleVector_reserve(self, n)

    def capacity(self):
        return _vsp_g.DoubleVector_capacity(self)
    __swig_destroy__ = _vsp_g.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _vsp_g.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _vsp_g.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vsp_g.StringVector___nonzero__(self)

    def __bool__(self):
        return _vsp_g.StringVector___bool__(self)

    def __len__(self):
        return _vsp_g.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _vsp_g.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vsp_g.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vsp_g.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vsp_g.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vsp_g.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vsp_g.StringVector___setitem__(self, *args)

    def pop(self):
        return _vsp_g.StringVector_pop(self)

    def append(self, x):
        return _vsp_g.StringVector_append(self, x)

    def empty(self):
        return _vsp_g.StringVector_empty(self)

    def size(self):
        return _vsp_g.StringVector_size(self)

    def swap(self, v):
        return _vsp_g.StringVector_swap(self, v)

    def begin(self):
        return _vsp_g.StringVector_begin(self)

    def end(self):
        return _vsp_g.StringVector_end(self)

    def rbegin(self):
        return _vsp_g.StringVector_rbegin(self)

    def rend(self):
        return _vsp_g.StringVector_rend(self)

    def clear(self):
        return _vsp_g.StringVector_clear(self)

    def get_allocator(self):
        return _vsp_g.StringVector_get_allocator(self)

    def pop_back(self):
        return _vsp_g.StringVector_pop_back(self)

    def erase(self, *args):
        return _vsp_g.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _vsp_g.new_StringVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _vsp_g.StringVector_push_back(self, x)

    def front(self):
        return _vsp_g.StringVector_front(self)

    def back(self):
        return _vsp_g.StringVector_back(self)

    def assign(self, n, x):
        return _vsp_g.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _vsp_g.StringVector_resize(self, *args)

    def insert(self, *args):
        return _vsp_g.StringVector_insert(self, *args)

    def reserve(self, n):
        return _vsp_g.StringVector_reserve(self, n)

    def capacity(self):
        return _vsp_g.StringVector_capacity(self)
    __swig_destroy__ = _vsp_g.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _vsp_g.StringVector_swigregister
StringVector_swigregister(StringVector)

class DoubleVecVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVecVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVecVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _vsp_g.DoubleVecVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vsp_g.DoubleVecVec___nonzero__(self)

    def __bool__(self):
        return _vsp_g.DoubleVecVec___bool__(self)

    def __len__(self):
        return _vsp_g.DoubleVecVec___len__(self)

    def __getslice__(self, i, j):
        return _vsp_g.DoubleVecVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vsp_g.DoubleVecVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vsp_g.DoubleVecVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vsp_g.DoubleVecVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vsp_g.DoubleVecVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vsp_g.DoubleVecVec___setitem__(self, *args)

    def pop(self):
        return _vsp_g.DoubleVecVec_pop(self)

    def append(self, x):
        return _vsp_g.DoubleVecVec_append(self, x)

    def empty(self):
        return _vsp_g.DoubleVecVec_empty(self)

    def size(self):
        return _vsp_g.DoubleVecVec_size(self)

    def swap(self, v):
        return _vsp_g.DoubleVecVec_swap(self, v)

    def begin(self):
        return _vsp_g.DoubleVecVec_begin(self)

    def end(self):
        return _vsp_g.DoubleVecVec_end(self)

    def rbegin(self):
        return _vsp_g.DoubleVecVec_rbegin(self)

    def rend(self):
        return _vsp_g.DoubleVecVec_rend(self)

    def clear(self):
        return _vsp_g.DoubleVecVec_clear(self)

    def get_allocator(self):
        return _vsp_g.DoubleVecVec_get_allocator(self)

    def pop_back(self):
        return _vsp_g.DoubleVecVec_pop_back(self)

    def erase(self, *args):
        return _vsp_g.DoubleVecVec_erase(self, *args)

    def __init__(self, *args):
        this = _vsp_g.new_DoubleVecVec(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _vsp_g.DoubleVecVec_push_back(self, x)

    def front(self):
        return _vsp_g.DoubleVecVec_front(self)

    def back(self):
        return _vsp_g.DoubleVecVec_back(self)

    def assign(self, n, x):
        return _vsp_g.DoubleVecVec_assign(self, n, x)

    def resize(self, *args):
        return _vsp_g.DoubleVecVec_resize(self, *args)

    def insert(self, *args):
        return _vsp_g.DoubleVecVec_insert(self, *args)

    def reserve(self, n):
        return _vsp_g.DoubleVecVec_reserve(self, n)

    def capacity(self):
        return _vsp_g.DoubleVecVec_capacity(self)
    __swig_destroy__ = _vsp_g.delete_DoubleVecVec
    __del__ = lambda self: None
DoubleVecVec_swigregister = _vsp_g.DoubleVecVec_swigregister
DoubleVecVec_swigregister(DoubleVecVec)

class Vec3dVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3dVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3dVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _vsp_g.Vec3dVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vsp_g.Vec3dVec___nonzero__(self)

    def __bool__(self):
        return _vsp_g.Vec3dVec___bool__(self)

    def __len__(self):
        return _vsp_g.Vec3dVec___len__(self)

    def __getslice__(self, i, j):
        return _vsp_g.Vec3dVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vsp_g.Vec3dVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vsp_g.Vec3dVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vsp_g.Vec3dVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vsp_g.Vec3dVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vsp_g.Vec3dVec___setitem__(self, *args)

    def pop(self):
        return _vsp_g.Vec3dVec_pop(self)

    def append(self, x):
        return _vsp_g.Vec3dVec_append(self, x)

    def empty(self):
        return _vsp_g.Vec3dVec_empty(self)

    def size(self):
        return _vsp_g.Vec3dVec_size(self)

    def swap(self, v):
        return _vsp_g.Vec3dVec_swap(self, v)

    def begin(self):
        return _vsp_g.Vec3dVec_begin(self)

    def end(self):
        return _vsp_g.Vec3dVec_end(self)

    def rbegin(self):
        return _vsp_g.Vec3dVec_rbegin(self)

    def rend(self):
        return _vsp_g.Vec3dVec_rend(self)

    def clear(self):
        return _vsp_g.Vec3dVec_clear(self)

    def get_allocator(self):
        return _vsp_g.Vec3dVec_get_allocator(self)

    def pop_back(self):
        return _vsp_g.Vec3dVec_pop_back(self)

    def erase(self, *args):
        return _vsp_g.Vec3dVec_erase(self, *args)

    def __init__(self, *args):
        this = _vsp_g.new_Vec3dVec(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _vsp_g.Vec3dVec_push_back(self, x)

    def front(self):
        return _vsp_g.Vec3dVec_front(self)

    def back(self):
        return _vsp_g.Vec3dVec_back(self)

    def assign(self, n, x):
        return _vsp_g.Vec3dVec_assign(self, n, x)

    def resize(self, *args):
        return _vsp_g.Vec3dVec_resize(self, *args)

    def insert(self, *args):
        return _vsp_g.Vec3dVec_insert(self, *args)

    def reserve(self, n):
        return _vsp_g.Vec3dVec_reserve(self, n)

    def capacity(self):
        return _vsp_g.Vec3dVec_capacity(self)
    __swig_destroy__ = _vsp_g.delete_Vec3dVec
    __del__ = lambda self: None
Vec3dVec_swigregister = _vsp_g.Vec3dVec_swigregister
Vec3dVec_swigregister(Vec3dVec)


_vsp_g.VSP_OK_swigconstant(_vsp_g)
VSP_OK = _vsp_g.VSP_OK

_vsp_g.VSP_INVALID_PTR_swigconstant(_vsp_g)
VSP_INVALID_PTR = _vsp_g.VSP_INVALID_PTR

_vsp_g.VSP_CANT_FIND_TYPE_swigconstant(_vsp_g)
VSP_CANT_FIND_TYPE = _vsp_g.VSP_CANT_FIND_TYPE

_vsp_g.VSP_CANT_FIND_PARM_swigconstant(_vsp_g)
VSP_CANT_FIND_PARM = _vsp_g.VSP_CANT_FIND_PARM

_vsp_g.VSP_CANT_FIND_NAME_swigconstant(_vsp_g)
VSP_CANT_FIND_NAME = _vsp_g.VSP_CANT_FIND_NAME

_vsp_g.VSP_INVALID_GEOM_ID_swigconstant(_vsp_g)
VSP_INVALID_GEOM_ID = _vsp_g.VSP_INVALID_GEOM_ID

_vsp_g.VSP_FILE_DOES_NOT_EXIST_swigconstant(_vsp_g)
VSP_FILE_DOES_NOT_EXIST = _vsp_g.VSP_FILE_DOES_NOT_EXIST

_vsp_g.VSP_FILE_WRITE_FAILURE_swigconstant(_vsp_g)
VSP_FILE_WRITE_FAILURE = _vsp_g.VSP_FILE_WRITE_FAILURE

_vsp_g.VSP_WRONG_XSEC_TYPE_swigconstant(_vsp_g)
VSP_WRONG_XSEC_TYPE = _vsp_g.VSP_WRONG_XSEC_TYPE

_vsp_g.VSP_WRONG_FILE_TYPE_swigconstant(_vsp_g)
VSP_WRONG_FILE_TYPE = _vsp_g.VSP_WRONG_FILE_TYPE

_vsp_g.VSP_INDEX_OUT_RANGE_swigconstant(_vsp_g)
VSP_INDEX_OUT_RANGE = _vsp_g.VSP_INDEX_OUT_RANGE

_vsp_g.VSP_INVALID_XSEC_ID_swigconstant(_vsp_g)
VSP_INVALID_XSEC_ID = _vsp_g.VSP_INVALID_XSEC_ID

_vsp_g.VSP_INVALID_ID_swigconstant(_vsp_g)
VSP_INVALID_ID = _vsp_g.VSP_INVALID_ID

_vsp_g.VSP_CANT_SET_NOT_EQ_PARM_swigconstant(_vsp_g)
VSP_CANT_SET_NOT_EQ_PARM = _vsp_g.VSP_CANT_SET_NOT_EQ_PARM

_vsp_g.SYM_XY_swigconstant(_vsp_g)
SYM_XY = _vsp_g.SYM_XY

_vsp_g.SYM_XZ_swigconstant(_vsp_g)
SYM_XZ = _vsp_g.SYM_XZ

_vsp_g.SYM_YZ_swigconstant(_vsp_g)
SYM_YZ = _vsp_g.SYM_YZ

_vsp_g.SYM_ROT_X_swigconstant(_vsp_g)
SYM_ROT_X = _vsp_g.SYM_ROT_X

_vsp_g.SYM_ROT_Y_swigconstant(_vsp_g)
SYM_ROT_Y = _vsp_g.SYM_ROT_Y

_vsp_g.SYM_ROT_Z_swigconstant(_vsp_g)
SYM_ROT_Z = _vsp_g.SYM_ROT_Z

_vsp_g.SYM_PLANAR_TYPES_swigconstant(_vsp_g)
SYM_PLANAR_TYPES = _vsp_g.SYM_PLANAR_TYPES

_vsp_g.SYM_NUM_TYPES_swigconstant(_vsp_g)
SYM_NUM_TYPES = _vsp_g.SYM_NUM_TYPES

_vsp_g.XSEC_FUSE_swigconstant(_vsp_g)
XSEC_FUSE = _vsp_g.XSEC_FUSE

_vsp_g.XSEC_STACK_swigconstant(_vsp_g)
XSEC_STACK = _vsp_g.XSEC_STACK

_vsp_g.XSEC_WING_swigconstant(_vsp_g)
XSEC_WING = _vsp_g.XSEC_WING

_vsp_g.XSEC_CUSTOM_swigconstant(_vsp_g)
XSEC_CUSTOM = _vsp_g.XSEC_CUSTOM

_vsp_g.XSEC_NUM_TYPES_swigconstant(_vsp_g)
XSEC_NUM_TYPES = _vsp_g.XSEC_NUM_TYPES

_vsp_g.X_DIR_swigconstant(_vsp_g)
X_DIR = _vsp_g.X_DIR

_vsp_g.Y_DIR_swigconstant(_vsp_g)
Y_DIR = _vsp_g.Y_DIR

_vsp_g.Z_DIR_swigconstant(_vsp_g)
Z_DIR = _vsp_g.Z_DIR

_vsp_g.LEN_MM_swigconstant(_vsp_g)
LEN_MM = _vsp_g.LEN_MM

_vsp_g.LEN_CM_swigconstant(_vsp_g)
LEN_CM = _vsp_g.LEN_CM

_vsp_g.LEN_M_swigconstant(_vsp_g)
LEN_M = _vsp_g.LEN_M

_vsp_g.LEN_IN_swigconstant(_vsp_g)
LEN_IN = _vsp_g.LEN_IN

_vsp_g.LEN_FT_swigconstant(_vsp_g)
LEN_FT = _vsp_g.LEN_FT

_vsp_g.LEN_YD_swigconstant(_vsp_g)
LEN_YD = _vsp_g.LEN_YD

_vsp_g.ANG_RAD_swigconstant(_vsp_g)
ANG_RAD = _vsp_g.ANG_RAD

_vsp_g.ANG_DEG_swigconstant(_vsp_g)
ANG_DEG = _vsp_g.ANG_DEG

_vsp_g.XS_SHIFT_LE_swigconstant(_vsp_g)
XS_SHIFT_LE = _vsp_g.XS_SHIFT_LE

_vsp_g.XS_SHIFT_MID_swigconstant(_vsp_g)
XS_SHIFT_MID = _vsp_g.XS_SHIFT_MID

_vsp_g.XS_SHIFT_TE_swigconstant(_vsp_g)
XS_SHIFT_TE = _vsp_g.XS_SHIFT_TE

_vsp_g.XS_POINT_swigconstant(_vsp_g)
XS_POINT = _vsp_g.XS_POINT

_vsp_g.XS_CIRCLE_swigconstant(_vsp_g)
XS_CIRCLE = _vsp_g.XS_CIRCLE

_vsp_g.XS_ELLIPSE_swigconstant(_vsp_g)
XS_ELLIPSE = _vsp_g.XS_ELLIPSE

_vsp_g.XS_SUPER_ELLIPSE_swigconstant(_vsp_g)
XS_SUPER_ELLIPSE = _vsp_g.XS_SUPER_ELLIPSE

_vsp_g.XS_ROUNDED_RECTANGLE_swigconstant(_vsp_g)
XS_ROUNDED_RECTANGLE = _vsp_g.XS_ROUNDED_RECTANGLE

_vsp_g.XS_GENERAL_FUSE_swigconstant(_vsp_g)
XS_GENERAL_FUSE = _vsp_g.XS_GENERAL_FUSE

_vsp_g.XS_FILE_FUSE_swigconstant(_vsp_g)
XS_FILE_FUSE = _vsp_g.XS_FILE_FUSE

_vsp_g.XS_FOUR_SERIES_swigconstant(_vsp_g)
XS_FOUR_SERIES = _vsp_g.XS_FOUR_SERIES

_vsp_g.XS_SIX_SERIES_swigconstant(_vsp_g)
XS_SIX_SERIES = _vsp_g.XS_SIX_SERIES

_vsp_g.XS_BICONVEX_swigconstant(_vsp_g)
XS_BICONVEX = _vsp_g.XS_BICONVEX

_vsp_g.XS_WEDGE_swigconstant(_vsp_g)
XS_WEDGE = _vsp_g.XS_WEDGE

_vsp_g.XS_BEZIER_swigconstant(_vsp_g)
XS_BEZIER = _vsp_g.XS_BEZIER

_vsp_g.XS_FILE_AIRFOIL_swigconstant(_vsp_g)
XS_FILE_AIRFOIL = _vsp_g.XS_FILE_AIRFOIL

_vsp_g.XS_CST_AIRFOIL_swigconstant(_vsp_g)
XS_CST_AIRFOIL = _vsp_g.XS_CST_AIRFOIL

_vsp_g.XS_NUM_TYPES_swigconstant(_vsp_g)
XS_NUM_TYPES = _vsp_g.XS_NUM_TYPES

_vsp_g.CLOSE_NONE_swigconstant(_vsp_g)
CLOSE_NONE = _vsp_g.CLOSE_NONE

_vsp_g.CLOSE_SKEWLOW_swigconstant(_vsp_g)
CLOSE_SKEWLOW = _vsp_g.CLOSE_SKEWLOW

_vsp_g.CLOSE_SKEWUP_swigconstant(_vsp_g)
CLOSE_SKEWUP = _vsp_g.CLOSE_SKEWUP

_vsp_g.CLOSE_SKEWBOTH_swigconstant(_vsp_g)
CLOSE_SKEWBOTH = _vsp_g.CLOSE_SKEWBOTH

_vsp_g.CLOSE_EXTRAP_swigconstant(_vsp_g)
CLOSE_EXTRAP = _vsp_g.CLOSE_EXTRAP

_vsp_g.CLOSE_NUM_TYPES_swigconstant(_vsp_g)
CLOSE_NUM_TYPES = _vsp_g.CLOSE_NUM_TYPES

_vsp_g.TRIM_NONE_swigconstant(_vsp_g)
TRIM_NONE = _vsp_g.TRIM_NONE

_vsp_g.TRIM_X_swigconstant(_vsp_g)
TRIM_X = _vsp_g.TRIM_X

_vsp_g.TRIM_THICK_swigconstant(_vsp_g)
TRIM_THICK = _vsp_g.TRIM_THICK

_vsp_g.TRIM_NUM_TYPES_swigconstant(_vsp_g)
TRIM_NUM_TYPES = _vsp_g.TRIM_NUM_TYPES

_vsp_g.ABS_swigconstant(_vsp_g)
ABS = _vsp_g.ABS

_vsp_g.REL_swigconstant(_vsp_g)
REL = _vsp_g.REL

_vsp_g.XSEC_BOTH_SIDES_swigconstant(_vsp_g)
XSEC_BOTH_SIDES = _vsp_g.XSEC_BOTH_SIDES

_vsp_g.XSEC_LEFT_SIDE_swigconstant(_vsp_g)
XSEC_LEFT_SIDE = _vsp_g.XSEC_LEFT_SIDE

_vsp_g.XSEC_RIGHT_SIDE_swigconstant(_vsp_g)
XSEC_RIGHT_SIDE = _vsp_g.XSEC_RIGHT_SIDE

_vsp_g.IMPORT_STL_swigconstant(_vsp_g)
IMPORT_STL = _vsp_g.IMPORT_STL

_vsp_g.IMPORT_NASCART_swigconstant(_vsp_g)
IMPORT_NASCART = _vsp_g.IMPORT_NASCART

_vsp_g.IMPORT_CART3D_TRI_swigconstant(_vsp_g)
IMPORT_CART3D_TRI = _vsp_g.IMPORT_CART3D_TRI

_vsp_g.IMPORT_XSEC_MESH_swigconstant(_vsp_g)
IMPORT_XSEC_MESH = _vsp_g.IMPORT_XSEC_MESH

_vsp_g.IMPORT_PTS_swigconstant(_vsp_g)
IMPORT_PTS = _vsp_g.IMPORT_PTS

_vsp_g.EXPORT_FELISA_swigconstant(_vsp_g)
EXPORT_FELISA = _vsp_g.EXPORT_FELISA

_vsp_g.EXPORT_XSEC_swigconstant(_vsp_g)
EXPORT_XSEC = _vsp_g.EXPORT_XSEC

_vsp_g.EXPORT_STL_swigconstant(_vsp_g)
EXPORT_STL = _vsp_g.EXPORT_STL

_vsp_g.EXPORT_AWAVE_swigconstant(_vsp_g)
EXPORT_AWAVE = _vsp_g.EXPORT_AWAVE

_vsp_g.EXPORT_NASCART_swigconstant(_vsp_g)
EXPORT_NASCART = _vsp_g.EXPORT_NASCART

_vsp_g.EXPORT_POVRAY_swigconstant(_vsp_g)
EXPORT_POVRAY = _vsp_g.EXPORT_POVRAY

_vsp_g.EXPORT_CART3D_swigconstant(_vsp_g)
EXPORT_CART3D = _vsp_g.EXPORT_CART3D

_vsp_g.EXPORT_VORXSEC_swigconstant(_vsp_g)
EXPORT_VORXSEC = _vsp_g.EXPORT_VORXSEC

_vsp_g.EXPORT_XSECGEOM_swigconstant(_vsp_g)
EXPORT_XSECGEOM = _vsp_g.EXPORT_XSECGEOM

_vsp_g.EXPORT_GMSH_swigconstant(_vsp_g)
EXPORT_GMSH = _vsp_g.EXPORT_GMSH

_vsp_g.EXPORT_X3D_swigconstant(_vsp_g)
EXPORT_X3D = _vsp_g.EXPORT_X3D

_vsp_g.EXPORT_STEP_swigconstant(_vsp_g)
EXPORT_STEP = _vsp_g.EXPORT_STEP

_vsp_g.EXPORT_PLOT3D_swigconstant(_vsp_g)
EXPORT_PLOT3D = _vsp_g.EXPORT_PLOT3D

_vsp_g.EXPORT_IGES_swigconstant(_vsp_g)
EXPORT_IGES = _vsp_g.EXPORT_IGES

_vsp_g.NO_FILE_TYPE_swigconstant(_vsp_g)
NO_FILE_TYPE = _vsp_g.NO_FILE_TYPE

_vsp_g.COMP_GEOM_TXT_TYPE_swigconstant(_vsp_g)
COMP_GEOM_TXT_TYPE = _vsp_g.COMP_GEOM_TXT_TYPE

_vsp_g.COMP_GEOM_CSV_TYPE_swigconstant(_vsp_g)
COMP_GEOM_CSV_TYPE = _vsp_g.COMP_GEOM_CSV_TYPE

_vsp_g.DRAG_BUILD_TSV_TYPE_swigconstant(_vsp_g)
DRAG_BUILD_TSV_TYPE = _vsp_g.DRAG_BUILD_TSV_TYPE

_vsp_g.SLICE_TXT_TYPE_swigconstant(_vsp_g)
SLICE_TXT_TYPE = _vsp_g.SLICE_TXT_TYPE

_vsp_g.MASS_PROP_TXT_TYPE_swigconstant(_vsp_g)
MASS_PROP_TXT_TYPE = _vsp_g.MASS_PROP_TXT_TYPE

_vsp_g.DEGEN_GEOM_CSV_TYPE_swigconstant(_vsp_g)
DEGEN_GEOM_CSV_TYPE = _vsp_g.DEGEN_GEOM_CSV_TYPE

_vsp_g.DEGEN_GEOM_M_TYPE_swigconstant(_vsp_g)
DEGEN_GEOM_M_TYPE = _vsp_g.DEGEN_GEOM_M_TYPE

_vsp_g.CFD_STL_TYPE_swigconstant(_vsp_g)
CFD_STL_TYPE = _vsp_g.CFD_STL_TYPE

_vsp_g.CFD_POLY_TYPE_swigconstant(_vsp_g)
CFD_POLY_TYPE = _vsp_g.CFD_POLY_TYPE

_vsp_g.CFD_TRI_TYPE_swigconstant(_vsp_g)
CFD_TRI_TYPE = _vsp_g.CFD_TRI_TYPE

_vsp_g.CFD_OBJ_TYPE_swigconstant(_vsp_g)
CFD_OBJ_TYPE = _vsp_g.CFD_OBJ_TYPE

_vsp_g.CFD_DAT_TYPE_swigconstant(_vsp_g)
CFD_DAT_TYPE = _vsp_g.CFD_DAT_TYPE

_vsp_g.CFD_KEY_TYPE_swigconstant(_vsp_g)
CFD_KEY_TYPE = _vsp_g.CFD_KEY_TYPE

_vsp_g.CFD_GMSH_TYPE_swigconstant(_vsp_g)
CFD_GMSH_TYPE = _vsp_g.CFD_GMSH_TYPE

_vsp_g.CFD_SRF_TYPE_swigconstant(_vsp_g)
CFD_SRF_TYPE = _vsp_g.CFD_SRF_TYPE

_vsp_g.CFD_TKEY_TYPE_swigconstant(_vsp_g)
CFD_TKEY_TYPE = _vsp_g.CFD_TKEY_TYPE

_vsp_g.SLICE_PLANAR_swigconstant(_vsp_g)
SLICE_PLANAR = _vsp_g.SLICE_PLANAR

_vsp_g.SLICE_AWAVE_swigconstant(_vsp_g)
SLICE_AWAVE = _vsp_g.SLICE_AWAVE

_vsp_g.SET_ALL_swigconstant(_vsp_g)
SET_ALL = _vsp_g.SET_ALL

_vsp_g.SET_SHOWN_swigconstant(_vsp_g)
SET_SHOWN = _vsp_g.SET_SHOWN

_vsp_g.SET_NOT_SHOWN_swigconstant(_vsp_g)
SET_NOT_SHOWN = _vsp_g.SET_NOT_SHOWN

_vsp_g.SET_FIRST_USER_swigconstant(_vsp_g)
SET_FIRST_USER = _vsp_g.SET_FIRST_USER

_vsp_g.INT_DATA_swigconstant(_vsp_g)
INT_DATA = _vsp_g.INT_DATA

_vsp_g.DOUBLE_DATA_swigconstant(_vsp_g)
DOUBLE_DATA = _vsp_g.DOUBLE_DATA

_vsp_g.STRING_DATA_swigconstant(_vsp_g)
STRING_DATA = _vsp_g.STRING_DATA

_vsp_g.VEC3D_DATA_swigconstant(_vsp_g)
VEC3D_DATA = _vsp_g.VEC3D_DATA

_vsp_g.MESH_INDEXED_TRI_swigconstant(_vsp_g)
MESH_INDEXED_TRI = _vsp_g.MESH_INDEXED_TRI

_vsp_g.MESH_SLICE_TRI_swigconstant(_vsp_g)
MESH_SLICE_TRI = _vsp_g.MESH_SLICE_TRI

_vsp_g.GEOM_XSECS_swigconstant(_vsp_g)
GEOM_XSECS = _vsp_g.GEOM_XSECS

_vsp_g.CFD_STL_FILE_NAME_swigconstant(_vsp_g)
CFD_STL_FILE_NAME = _vsp_g.CFD_STL_FILE_NAME

_vsp_g.CFD_POLY_FILE_NAME_swigconstant(_vsp_g)
CFD_POLY_FILE_NAME = _vsp_g.CFD_POLY_FILE_NAME

_vsp_g.CFD_TRI_FILE_NAME_swigconstant(_vsp_g)
CFD_TRI_FILE_NAME = _vsp_g.CFD_TRI_FILE_NAME

_vsp_g.CFD_OBJ_FILE_NAME_swigconstant(_vsp_g)
CFD_OBJ_FILE_NAME = _vsp_g.CFD_OBJ_FILE_NAME

_vsp_g.CFD_DAT_FILE_NAME_swigconstant(_vsp_g)
CFD_DAT_FILE_NAME = _vsp_g.CFD_DAT_FILE_NAME

_vsp_g.CFD_KEY_FILE_NAME_swigconstant(_vsp_g)
CFD_KEY_FILE_NAME = _vsp_g.CFD_KEY_FILE_NAME

_vsp_g.CFD_GMSH_FILE_NAME_swigconstant(_vsp_g)
CFD_GMSH_FILE_NAME = _vsp_g.CFD_GMSH_FILE_NAME

_vsp_g.CFD_SRF_FILE_NAME_swigconstant(_vsp_g)
CFD_SRF_FILE_NAME = _vsp_g.CFD_SRF_FILE_NAME

_vsp_g.CFD_TKEY_FILE_NAME_swigconstant(_vsp_g)
CFD_TKEY_FILE_NAME = _vsp_g.CFD_TKEY_FILE_NAME

_vsp_g.CFD_NUM_FILE_NAMES_swigconstant(_vsp_g)
CFD_NUM_FILE_NAMES = _vsp_g.CFD_NUM_FILE_NAMES

_vsp_g.CFD_MIN_EDGE_LEN_swigconstant(_vsp_g)
CFD_MIN_EDGE_LEN = _vsp_g.CFD_MIN_EDGE_LEN

_vsp_g.CFD_MAX_EDGE_LEN_swigconstant(_vsp_g)
CFD_MAX_EDGE_LEN = _vsp_g.CFD_MAX_EDGE_LEN

_vsp_g.CFD_MAX_GAP_swigconstant(_vsp_g)
CFD_MAX_GAP = _vsp_g.CFD_MAX_GAP

_vsp_g.CFD_NUM_CIRCLE_SEGS_swigconstant(_vsp_g)
CFD_NUM_CIRCLE_SEGS = _vsp_g.CFD_NUM_CIRCLE_SEGS

_vsp_g.CFD_GROWTH_RATIO_swigconstant(_vsp_g)
CFD_GROWTH_RATIO = _vsp_g.CFD_GROWTH_RATIO

_vsp_g.CFD_LIMIT_GROWTH_FLAG_swigconstant(_vsp_g)
CFD_LIMIT_GROWTH_FLAG = _vsp_g.CFD_LIMIT_GROWTH_FLAG

_vsp_g.CFD_INTERSECT_SUBSURFACE_FLAG_swigconstant(_vsp_g)
CFD_INTERSECT_SUBSURFACE_FLAG = _vsp_g.CFD_INTERSECT_SUBSURFACE_FLAG

_vsp_g.CFD_HALF_MESH_FLAG_swigconstant(_vsp_g)
CFD_HALF_MESH_FLAG = _vsp_g.CFD_HALF_MESH_FLAG

_vsp_g.CFD_FAR_FIELD_FLAG_swigconstant(_vsp_g)
CFD_FAR_FIELD_FLAG = _vsp_g.CFD_FAR_FIELD_FLAG

_vsp_g.CFD_FAR_MAX_EDGE_LEN_swigconstant(_vsp_g)
CFD_FAR_MAX_EDGE_LEN = _vsp_g.CFD_FAR_MAX_EDGE_LEN

_vsp_g.CFD_FAR_MAX_GAP_swigconstant(_vsp_g)
CFD_FAR_MAX_GAP = _vsp_g.CFD_FAR_MAX_GAP

_vsp_g.CFD_FAR_NUM_CIRCLE_SEGS_swigconstant(_vsp_g)
CFD_FAR_NUM_CIRCLE_SEGS = _vsp_g.CFD_FAR_NUM_CIRCLE_SEGS

_vsp_g.CFD_FAR_SIZE_ABS_FLAG_swigconstant(_vsp_g)
CFD_FAR_SIZE_ABS_FLAG = _vsp_g.CFD_FAR_SIZE_ABS_FLAG

_vsp_g.CFD_FAR_LENGTH_swigconstant(_vsp_g)
CFD_FAR_LENGTH = _vsp_g.CFD_FAR_LENGTH

_vsp_g.CFD_FAR_WIDTH_swigconstant(_vsp_g)
CFD_FAR_WIDTH = _vsp_g.CFD_FAR_WIDTH

_vsp_g.CFD_FAR_HEIGHT_swigconstant(_vsp_g)
CFD_FAR_HEIGHT = _vsp_g.CFD_FAR_HEIGHT

_vsp_g.CFD_FAR_X_SCALE_swigconstant(_vsp_g)
CFD_FAR_X_SCALE = _vsp_g.CFD_FAR_X_SCALE

_vsp_g.CFD_FAR_Y_SCALE_swigconstant(_vsp_g)
CFD_FAR_Y_SCALE = _vsp_g.CFD_FAR_Y_SCALE

_vsp_g.CFD_FAR_Z_SCALE_swigconstant(_vsp_g)
CFD_FAR_Z_SCALE = _vsp_g.CFD_FAR_Z_SCALE

_vsp_g.CFD_FAR_LOC_MAN_FLAG_swigconstant(_vsp_g)
CFD_FAR_LOC_MAN_FLAG = _vsp_g.CFD_FAR_LOC_MAN_FLAG

_vsp_g.CFD_FAR_LOC_X_swigconstant(_vsp_g)
CFD_FAR_LOC_X = _vsp_g.CFD_FAR_LOC_X

_vsp_g.CFD_FAR_LOC_Y_swigconstant(_vsp_g)
CFD_FAR_LOC_Y = _vsp_g.CFD_FAR_LOC_Y

_vsp_g.CFD_FAR_LOC_Z_swigconstant(_vsp_g)
CFD_FAR_LOC_Z = _vsp_g.CFD_FAR_LOC_Z

_vsp_g.CFD_WAKE_SCALE_swigconstant(_vsp_g)
CFD_WAKE_SCALE = _vsp_g.CFD_WAKE_SCALE

_vsp_g.CFD_WAKE_ANGLE_swigconstant(_vsp_g)
CFD_WAKE_ANGLE = _vsp_g.CFD_WAKE_ANGLE

_vsp_g.POINT_SOURCE_swigconstant(_vsp_g)
POINT_SOURCE = _vsp_g.POINT_SOURCE

_vsp_g.LINE_SOURCE_swigconstant(_vsp_g)
LINE_SOURCE = _vsp_g.LINE_SOURCE

_vsp_g.BOX_SOURCE_swigconstant(_vsp_g)
BOX_SOURCE = _vsp_g.BOX_SOURCE

_vsp_g.NUM_SOURCE_TYPES_swigconstant(_vsp_g)
NUM_SOURCE_TYPES = _vsp_g.NUM_SOURCE_TYPES

_vsp_g.XDDM_VAR_swigconstant(_vsp_g)
XDDM_VAR = _vsp_g.XDDM_VAR

_vsp_g.XDDM_CONST_swigconstant(_vsp_g)
XDDM_CONST = _vsp_g.XDDM_CONST

_vsp_g.NORMAL_SURF_swigconstant(_vsp_g)
NORMAL_SURF = _vsp_g.NORMAL_SURF

_vsp_g.WING_SURF_swigconstant(_vsp_g)
WING_SURF = _vsp_g.WING_SURF

_vsp_g.DISK_SURF_swigconstant(_vsp_g)
DISK_SURF = _vsp_g.DISK_SURF

_vsp_g.NUM_SURF_TYPES_swigconstant(_vsp_g)
NUM_SURF_TYPES = _vsp_g.NUM_SURF_TYPES

_vsp_g.CFD_NORMAL_swigconstant(_vsp_g)
CFD_NORMAL = _vsp_g.CFD_NORMAL

_vsp_g.CFD_NEGATIVE_swigconstant(_vsp_g)
CFD_NEGATIVE = _vsp_g.CFD_NEGATIVE

_vsp_g.CFD_TRANSPARENT_swigconstant(_vsp_g)
CFD_TRANSPARENT = _vsp_g.CFD_TRANSPARENT

_vsp_g.CFD_NUM_TYPES_swigconstant(_vsp_g)
CFD_NUM_TYPES = _vsp_g.CFD_NUM_TYPES

_vsp_g.SS_LINE_swigconstant(_vsp_g)
SS_LINE = _vsp_g.SS_LINE

_vsp_g.SS_RECTANGLE_swigconstant(_vsp_g)
SS_RECTANGLE = _vsp_g.SS_RECTANGLE

_vsp_g.SS_ELLIPSE_swigconstant(_vsp_g)
SS_ELLIPSE = _vsp_g.SS_ELLIPSE

_vsp_g.SS_CONTROL_swigconstant(_vsp_g)
SS_CONTROL = _vsp_g.SS_CONTROL

_vsp_g.SS_NUM_TYPES_swigconstant(_vsp_g)
SS_NUM_TYPES = _vsp_g.SS_NUM_TYPES

_vsp_g.INSIDE_swigconstant(_vsp_g)
INSIDE = _vsp_g.INSIDE

_vsp_g.OUTSIDE_swigconstant(_vsp_g)
OUTSIDE = _vsp_g.OUTSIDE

_vsp_g.AR_WSECT_DRIVER_swigconstant(_vsp_g)
AR_WSECT_DRIVER = _vsp_g.AR_WSECT_DRIVER

_vsp_g.SPAN_WSECT_DRIVER_swigconstant(_vsp_g)
SPAN_WSECT_DRIVER = _vsp_g.SPAN_WSECT_DRIVER

_vsp_g.AREA_WSECT_DRIVER_swigconstant(_vsp_g)
AREA_WSECT_DRIVER = _vsp_g.AREA_WSECT_DRIVER

_vsp_g.TAPER_WSECT_DRIVER_swigconstant(_vsp_g)
TAPER_WSECT_DRIVER = _vsp_g.TAPER_WSECT_DRIVER

_vsp_g.AVEC_WSECT_DRIVER_swigconstant(_vsp_g)
AVEC_WSECT_DRIVER = _vsp_g.AVEC_WSECT_DRIVER

_vsp_g.ROOTC_WSECT_DRIVER_swigconstant(_vsp_g)
ROOTC_WSECT_DRIVER = _vsp_g.ROOTC_WSECT_DRIVER

_vsp_g.TIPC_WSECT_DRIVER_swigconstant(_vsp_g)
TIPC_WSECT_DRIVER = _vsp_g.TIPC_WSECT_DRIVER

_vsp_g.SECSWEEP_WSECT_DRIVER_swigconstant(_vsp_g)
SECSWEEP_WSECT_DRIVER = _vsp_g.SECSWEEP_WSECT_DRIVER

_vsp_g.NUM_WSECT_DRIVER_swigconstant(_vsp_g)
NUM_WSECT_DRIVER = _vsp_g.NUM_WSECT_DRIVER

_vsp_g.SWEEP_WSECT_DRIVER_swigconstant(_vsp_g)
SWEEP_WSECT_DRIVER = _vsp_g.SWEEP_WSECT_DRIVER

_vsp_g.SWEEPLOC_WSECT_DRIVER_swigconstant(_vsp_g)
SWEEPLOC_WSECT_DRIVER = _vsp_g.SWEEPLOC_WSECT_DRIVER

_vsp_g.SECSWEEPLOC_WSECT_DRIVER_swigconstant(_vsp_g)
SECSWEEPLOC_WSECT_DRIVER = _vsp_g.SECSWEEPLOC_WSECT_DRIVER
class ErrorObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorObj, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _vsp_g.new_ErrorObj(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _vsp_g.delete_ErrorObj
    __del__ = lambda self: None

    def GetErrorCode(self):
        return _vsp_g.ErrorObj_GetErrorCode(self)

    def GetErrorString(self):
        return _vsp_g.ErrorObj_GetErrorString(self)
    __swig_setmethods__["m_ErrorCode"] = _vsp_g.ErrorObj_m_ErrorCode_set
    __swig_getmethods__["m_ErrorCode"] = _vsp_g.ErrorObj_m_ErrorCode_get
    if _newclass:
        m_ErrorCode = _swig_property(_vsp_g.ErrorObj_m_ErrorCode_get, _vsp_g.ErrorObj_m_ErrorCode_set)
    __swig_setmethods__["m_ErrorString"] = _vsp_g.ErrorObj_m_ErrorString_set
    __swig_getmethods__["m_ErrorString"] = _vsp_g.ErrorObj_m_ErrorString_get
    if _newclass:
        m_ErrorString = _swig_property(_vsp_g.ErrorObj_m_ErrorString_get, _vsp_g.ErrorObj_m_ErrorString_set)

    def NoError(self):
        return _vsp_g.ErrorObj_NoError(self)
ErrorObj_swigregister = _vsp_g.ErrorObj_swigregister
ErrorObj_swigregister(ErrorObj)

class ErrorMgrSingleton(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorMgrSingleton, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorMgrSingleton, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetErrorLastCallFlag(self):
        return _vsp_g.ErrorMgrSingleton_GetErrorLastCallFlag(self)

    def GetNumTotalErrors(self):
        return _vsp_g.ErrorMgrSingleton_GetNumTotalErrors(self)

    def PopLastError(self):
        return _vsp_g.ErrorMgrSingleton_PopLastError(self)

    def GetLastError(self):
        return _vsp_g.ErrorMgrSingleton_GetLastError(self)

    def PopErrorAndPrint(self, stream):
        return _vsp_g.ErrorMgrSingleton_PopErrorAndPrint(self, stream)

    def AddError(self, code, desc):
        return _vsp_g.ErrorMgrSingleton_AddError(self, code, desc)

    def NoError(self):
        return _vsp_g.ErrorMgrSingleton_NoError(self)

    def MessageCallback(self, arg2, data):
        return _vsp_g.ErrorMgrSingleton_MessageCallback(self, arg2, data)
    __swig_getmethods__["getInstance"] = lambda x: _vsp_g.ErrorMgrSingleton_getInstance
    if _newclass:
        getInstance = staticmethod(_vsp_g.ErrorMgrSingleton_getInstance)
ErrorMgrSingleton_swigregister = _vsp_g.ErrorMgrSingleton_swigregister
ErrorMgrSingleton_swigregister(ErrorMgrSingleton)

def ErrorMgrSingleton_getInstance():
    return _vsp_g.ErrorMgrSingleton_getInstance()
ErrorMgrSingleton_getInstance = _vsp_g.ErrorMgrSingleton_getInstance


def VSPCheckSetup():
    return _vsp_g.VSPCheckSetup()
VSPCheckSetup = _vsp_g.VSPCheckSetup

def VSPRenew():
    return _vsp_g.VSPRenew()
VSPRenew = _vsp_g.VSPRenew

def Update():
    return _vsp_g.Update()
Update = _vsp_g.Update

def VSPExit(error_code):
    return _vsp_g.VSPExit(error_code)
VSPExit = _vsp_g.VSPExit

def ReadVSPFile(file_name):
    return _vsp_g.ReadVSPFile(file_name)
ReadVSPFile = _vsp_g.ReadVSPFile

def WriteVSPFile(*args):
    return _vsp_g.WriteVSPFile(*args)
WriteVSPFile = _vsp_g.WriteVSPFile

def GetVSPFileName():
    return _vsp_g.GetVSPFileName()
GetVSPFileName = _vsp_g.GetVSPFileName

def ClearVSPModel():
    return _vsp_g.ClearVSPModel()
ClearVSPModel = _vsp_g.ClearVSPModel

def InsertVSPFile(file_name, parent_geom_id):
    return _vsp_g.InsertVSPFile(file_name, parent_geom_id)
InsertVSPFile = _vsp_g.InsertVSPFile

def ExportFile(file_name, write_set_index, file_type):
    return _vsp_g.ExportFile(file_name, write_set_index, file_type)
ExportFile = _vsp_g.ExportFile

def ImportFile(file_name, file_type, parent):
    return _vsp_g.ImportFile(file_name, file_type, parent)
ImportFile = _vsp_g.ImportFile

def ReadApplyDESFile(file_name):
    return _vsp_g.ReadApplyDESFile(file_name)
ReadApplyDESFile = _vsp_g.ReadApplyDESFile

def WriteDESFile(file_name):
    return _vsp_g.WriteDESFile(file_name)
WriteDESFile = _vsp_g.WriteDESFile

def ReadApplyXDDMFile(file_name):
    return _vsp_g.ReadApplyXDDMFile(file_name)
ReadApplyXDDMFile = _vsp_g.ReadApplyXDDMFile

def WriteXDDMFile(file_name):
    return _vsp_g.WriteXDDMFile(file_name)
WriteXDDMFile = _vsp_g.WriteXDDMFile

def GetNumDesignVars():
    return _vsp_g.GetNumDesignVars()
GetNumDesignVars = _vsp_g.GetNumDesignVars

def AddDesignVar(parm_id, type):
    return _vsp_g.AddDesignVar(parm_id, type)
AddDesignVar = _vsp_g.AddDesignVar

def DeleteAllDesignVars():
    return _vsp_g.DeleteAllDesignVars()
DeleteAllDesignVars = _vsp_g.DeleteAllDesignVars

def GetDesignVar(index):
    return _vsp_g.GetDesignVar(index)
GetDesignVar = _vsp_g.GetDesignVar

def GetDesignVarType(index):
    return _vsp_g.GetDesignVarType(index)
GetDesignVarType = _vsp_g.GetDesignVarType

def SetComputationFileName(file_type, file_name):
    return _vsp_g.SetComputationFileName(file_type, file_name)
SetComputationFileName = _vsp_g.SetComputationFileName

def ComputeMassProps(set, num_slices):
    return _vsp_g.ComputeMassProps(set, num_slices)
ComputeMassProps = _vsp_g.ComputeMassProps

def ComputeCompGeom(set, half_mesh, file_export_types):
    return _vsp_g.ComputeCompGeom(set, half_mesh, file_export_types)
ComputeCompGeom = _vsp_g.ComputeCompGeom

def ComputePlaneSlice(set, num_slices, norm, auto_bnd, start_bnd=0, end_bnd=0):
    return _vsp_g.ComputePlaneSlice(set, num_slices, norm, auto_bnd, start_bnd, end_bnd)
ComputePlaneSlice = _vsp_g.ComputePlaneSlice

def ComputeAwaveSlice(set, num_slices, num_rots, ang_control, comp_ang, norm, auto_bnd, start_bnd=0, end_bnd=0):
    return _vsp_g.ComputeAwaveSlice(set, num_slices, num_rots, ang_control, comp_ang, norm, auto_bnd, start_bnd, end_bnd)
ComputeAwaveSlice = _vsp_g.ComputeAwaveSlice

def ComputeDegenGeom(set, file_export_types):
    return _vsp_g.ComputeDegenGeom(set, file_export_types)
ComputeDegenGeom = _vsp_g.ComputeDegenGeom

def ComputeCFDMesh(set, file_export_types):
    return _vsp_g.ComputeCFDMesh(set, file_export_types)
ComputeCFDMesh = _vsp_g.ComputeCFDMesh

def SetCFDMeshVal(type, val):
    return _vsp_g.SetCFDMeshVal(type, val)
SetCFDMeshVal = _vsp_g.SetCFDMeshVal

def SetCFDWakeFlag(geom_id, flag):
    return _vsp_g.SetCFDWakeFlag(geom_id, flag)
SetCFDWakeFlag = _vsp_g.SetCFDWakeFlag

def DeleteAllCFDSources():
    return _vsp_g.DeleteAllCFDSources()
DeleteAllCFDSources = _vsp_g.DeleteAllCFDSources

def AddDefaultSources():
    return _vsp_g.AddDefaultSources()
AddDefaultSources = _vsp_g.AddDefaultSources

def AddCFDSource(type, geom_id, surf_index, l1, r1, u1, w1, l2=0, r2=0, u2=0, w2=0):
    return _vsp_g.AddCFDSource(type, geom_id, surf_index, l1, r1, u1, w1, l2, r2, u2, w2)
AddCFDSource = _vsp_g.AddCFDSource

def GetAllResultsNames():
    return _vsp_g.GetAllResultsNames()
GetAllResultsNames = _vsp_g.GetAllResultsNames

def GetAllDataNames(results_id):
    return _vsp_g.GetAllDataNames(results_id)
GetAllDataNames = _vsp_g.GetAllDataNames

def GetNumResults(name):
    return _vsp_g.GetNumResults(name)
GetNumResults = _vsp_g.GetNumResults

def FindResultsID(name, index=0):
    return _vsp_g.FindResultsID(name, index)
FindResultsID = _vsp_g.FindResultsID

def FindLatestResultsID(name):
    return _vsp_g.FindLatestResultsID(name)
FindLatestResultsID = _vsp_g.FindLatestResultsID

def GetNumData(results_id, data_name):
    return _vsp_g.GetNumData(results_id, data_name)
GetNumData = _vsp_g.GetNumData

def GetIntResults(id, name, index=0):
    return _vsp_g.GetIntResults(id, name, index)
GetIntResults = _vsp_g.GetIntResults

def GetDoubleResults(id, name, index=0):
    return _vsp_g.GetDoubleResults(id, name, index)
GetDoubleResults = _vsp_g.GetDoubleResults

def GetStringResults(id, name, index=0):
    return _vsp_g.GetStringResults(id, name, index)
GetStringResults = _vsp_g.GetStringResults

def GetVec3dResults(id, name, index=0):
    return _vsp_g.GetVec3dResults(id, name, index)
GetVec3dResults = _vsp_g.GetVec3dResults

def CreateGeomResults(geom_id, name):
    return _vsp_g.CreateGeomResults(geom_id, name)
CreateGeomResults = _vsp_g.CreateGeomResults

def DeleteAllResults():
    return _vsp_g.DeleteAllResults()
DeleteAllResults = _vsp_g.DeleteAllResults

def DeleteResult(id):
    return _vsp_g.DeleteResult(id)
DeleteResult = _vsp_g.DeleteResult

def WriteResultsCSVFile(id, file_name):
    return _vsp_g.WriteResultsCSVFile(id, file_name)
WriteResultsCSVFile = _vsp_g.WriteResultsCSVFile

def StartGui():
    return _vsp_g.StartGui()
StartGui = _vsp_g.StartGui

def GetGeomTypes():
    return _vsp_g.GetGeomTypes()
GetGeomTypes = _vsp_g.GetGeomTypes

def AddGeom(*args):
    return _vsp_g.AddGeom(*args)
AddGeom = _vsp_g.AddGeom

def CutGeomToClipboard(geom_id):
    return _vsp_g.CutGeomToClipboard(geom_id)
CutGeomToClipboard = _vsp_g.CutGeomToClipboard

def CopyGeomToClipboard(geom_id):
    return _vsp_g.CopyGeomToClipboard(geom_id)
CopyGeomToClipboard = _vsp_g.CopyGeomToClipboard

def PasteGeomClipboard(*args):
    return _vsp_g.PasteGeomClipboard(*args)
PasteGeomClipboard = _vsp_g.PasteGeomClipboard

def FindGeoms():
    return _vsp_g.FindGeoms()
FindGeoms = _vsp_g.FindGeoms

def FindGeomsWithName(name):
    return _vsp_g.FindGeomsWithName(name)
FindGeomsWithName = _vsp_g.FindGeomsWithName

def FindGeom(name, index):
    return _vsp_g.FindGeom(name, index)
FindGeom = _vsp_g.FindGeom

def SetGeomName(geom_id, name):
    return _vsp_g.SetGeomName(geom_id, name)
SetGeomName = _vsp_g.SetGeomName

def GetGeomName(geom_id):
    return _vsp_g.GetGeomName(geom_id)
GetGeomName = _vsp_g.GetGeomName

def GetGeomParmIDs(geom_id):
    return _vsp_g.GetGeomParmIDs(geom_id)
GetGeomParmIDs = _vsp_g.GetGeomParmIDs

def GetParm(geom_id, name, group):
    return _vsp_g.GetParm(geom_id, name, group)
GetParm = _vsp_g.GetParm

def GetNumXSecSurfs(geom_id):
    return _vsp_g.GetNumXSecSurfs(geom_id)
GetNumXSecSurfs = _vsp_g.GetNumXSecSurfs

def GetNumMainSurfs(geom_id):
    return _vsp_g.GetNumMainSurfs(geom_id)
GetNumMainSurfs = _vsp_g.GetNumMainSurfs

def AddSubSurf(geom_id, type):
    return _vsp_g.AddSubSurf(geom_id, type)
AddSubSurf = _vsp_g.AddSubSurf

def GetSubSurf(geom_id, index):
    return _vsp_g.GetSubSurf(geom_id, index)
GetSubSurf = _vsp_g.GetSubSurf

def DeleteSubSurf(geom_id, sub_id):
    return _vsp_g.DeleteSubSurf(geom_id, sub_id)
DeleteSubSurf = _vsp_g.DeleteSubSurf

def CutXSec(geom_id, index):
    return _vsp_g.CutXSec(geom_id, index)
CutXSec = _vsp_g.CutXSec

def CopyXSec(geom_id, index):
    return _vsp_g.CopyXSec(geom_id, index)
CopyXSec = _vsp_g.CopyXSec

def PasteXSec(geom_id, index):
    return _vsp_g.PasteXSec(geom_id, index)
PasteXSec = _vsp_g.PasteXSec

def InsertXSec(geom_id, index, type):
    return _vsp_g.InsertXSec(geom_id, index, type)
InsertXSec = _vsp_g.InsertXSec

def SetDriverGroup(geom_id, section_index, driver_0, driver_1, driver_2):
    return _vsp_g.SetDriverGroup(geom_id, section_index, driver_0, driver_1, driver_2)
SetDriverGroup = _vsp_g.SetDriverGroup

def GetXSecSurf(geom_id, index):
    return _vsp_g.GetXSecSurf(geom_id, index)
GetXSecSurf = _vsp_g.GetXSecSurf

def GetNumXSec(xsec_surf_id):
    return _vsp_g.GetNumXSec(xsec_surf_id)
GetNumXSec = _vsp_g.GetNumXSec

def GetXSec(xsec_surf_id, xsec_index):
    return _vsp_g.GetXSec(xsec_surf_id, xsec_index)
GetXSec = _vsp_g.GetXSec

def ChangeXSecShape(xsec_surf_id, xsec_index, type):
    return _vsp_g.ChangeXSecShape(xsec_surf_id, xsec_index, type)
ChangeXSecShape = _vsp_g.ChangeXSecShape

def SetXSecSurfGlobalXForm(xsec_surf_id, mat):
    return _vsp_g.SetXSecSurfGlobalXForm(xsec_surf_id, mat)
SetXSecSurfGlobalXForm = _vsp_g.SetXSecSurfGlobalXForm

def GetXSecSurfGlobalXForm(xsec_surf_id):
    return _vsp_g.GetXSecSurfGlobalXForm(xsec_surf_id)
GetXSecSurfGlobalXForm = _vsp_g.GetXSecSurfGlobalXForm

def GetXSecShape(xsec_id):
    return _vsp_g.GetXSecShape(xsec_id)
GetXSecShape = _vsp_g.GetXSecShape

def GetXSecWidth(xsec_id):
    return _vsp_g.GetXSecWidth(xsec_id)
GetXSecWidth = _vsp_g.GetXSecWidth

def GetXSecHeight(xsec_id):
    return _vsp_g.GetXSecHeight(xsec_id)
GetXSecHeight = _vsp_g.GetXSecHeight

def SetXSecWidthHeight(xsec_id, w, h):
    return _vsp_g.SetXSecWidthHeight(xsec_id, w, h)
SetXSecWidthHeight = _vsp_g.SetXSecWidthHeight

def GetXSecParmIDs(xsec_id):
    return _vsp_g.GetXSecParmIDs(xsec_id)
GetXSecParmIDs = _vsp_g.GetXSecParmIDs

def GetXSecParm(xsec_id, name):
    return _vsp_g.GetXSecParm(xsec_id, name)
GetXSecParm = _vsp_g.GetXSecParm

def ReadFileXSec(xsec_id, file_name):
    return _vsp_g.ReadFileXSec(xsec_id, file_name)
ReadFileXSec = _vsp_g.ReadFileXSec

def SetXSecPnts(xsec_id, pnt_vec):
    return _vsp_g.SetXSecPnts(xsec_id, pnt_vec)
SetXSecPnts = _vsp_g.SetXSecPnts

def ComputeXSecPnt(xsec_id, fract):
    return _vsp_g.ComputeXSecPnt(xsec_id, fract)
ComputeXSecPnt = _vsp_g.ComputeXSecPnt

def ComputeXSecTan(xsec_id, fract):
    return _vsp_g.ComputeXSecTan(xsec_id, fract)
ComputeXSecTan = _vsp_g.ComputeXSecTan

def ResetXSecSkinParms(xsec_id):
    return _vsp_g.ResetXSecSkinParms(xsec_id)
ResetXSecSkinParms = _vsp_g.ResetXSecSkinParms

def SetXSecContinuity(xsec_id, cx):
    return _vsp_g.SetXSecContinuity(xsec_id, cx)
SetXSecContinuity = _vsp_g.SetXSecContinuity

def SetXSecTanAngles(xsec_id, side, top, right, bottom, left):
    return _vsp_g.SetXSecTanAngles(xsec_id, side, top, right, bottom, left)
SetXSecTanAngles = _vsp_g.SetXSecTanAngles

def SetXSecTanSlews(xsec_id, side, top, right, bottom, left):
    return _vsp_g.SetXSecTanSlews(xsec_id, side, top, right, bottom, left)
SetXSecTanSlews = _vsp_g.SetXSecTanSlews

def SetXSecTanStrengths(xsec_id, side, top, right, bottom, left):
    return _vsp_g.SetXSecTanStrengths(xsec_id, side, top, right, bottom, left)
SetXSecTanStrengths = _vsp_g.SetXSecTanStrengths

def SetXSecCurvatures(xsec_id, side, top, right, bottom, left):
    return _vsp_g.SetXSecCurvatures(xsec_id, side, top, right, bottom, left)
SetXSecCurvatures = _vsp_g.SetXSecCurvatures

def ReadFileAirfoil(xsec_id, file_name):
    return _vsp_g.ReadFileAirfoil(xsec_id, file_name)
ReadFileAirfoil = _vsp_g.ReadFileAirfoil

def SetAirfoilPnts(xsec_id, up_pnt_vec, low_pnt_vec):
    return _vsp_g.SetAirfoilPnts(xsec_id, up_pnt_vec, low_pnt_vec)
SetAirfoilPnts = _vsp_g.SetAirfoilPnts

def GetAirfoilUpperPnts(xsec_id):
    return _vsp_g.GetAirfoilUpperPnts(xsec_id)
GetAirfoilUpperPnts = _vsp_g.GetAirfoilUpperPnts

def GetAirfoilLowerPnts(xsec_id):
    return _vsp_g.GetAirfoilLowerPnts(xsec_id)
GetAirfoilLowerPnts = _vsp_g.GetAirfoilLowerPnts

def GetUpperCSTCoefs(xsec_id):
    return _vsp_g.GetUpperCSTCoefs(xsec_id)
GetUpperCSTCoefs = _vsp_g.GetUpperCSTCoefs

def GetLowerCSTCoefs(xsec_id):
    return _vsp_g.GetLowerCSTCoefs(xsec_id)
GetLowerCSTCoefs = _vsp_g.GetLowerCSTCoefs

def GetUpperCSTDegree(xsec_id):
    return _vsp_g.GetUpperCSTDegree(xsec_id)
GetUpperCSTDegree = _vsp_g.GetUpperCSTDegree

def GetLowerCSTDegree(xsec_id):
    return _vsp_g.GetLowerCSTDegree(xsec_id)
GetLowerCSTDegree = _vsp_g.GetLowerCSTDegree

def SetUpperCST(xsec_id, deg, coefs):
    return _vsp_g.SetUpperCST(xsec_id, deg, coefs)
SetUpperCST = _vsp_g.SetUpperCST

def SetLowerCST(xsec_id, deg, coefs):
    return _vsp_g.SetLowerCST(xsec_id, deg, coefs)
SetLowerCST = _vsp_g.SetLowerCST

def PromoteCSTUpper(xsec_id):
    return _vsp_g.PromoteCSTUpper(xsec_id)
PromoteCSTUpper = _vsp_g.PromoteCSTUpper

def PromoteCSTLower(xsec_id):
    return _vsp_g.PromoteCSTLower(xsec_id)
PromoteCSTLower = _vsp_g.PromoteCSTLower

def DemoteCSTUpper(xsec_id):
    return _vsp_g.DemoteCSTUpper(xsec_id)
DemoteCSTUpper = _vsp_g.DemoteCSTUpper

def DemoteCSTLower(xsec_id):
    return _vsp_g.DemoteCSTLower(xsec_id)
DemoteCSTLower = _vsp_g.DemoteCSTLower

def FitAfCST(xsec_surf_id, xsec_index, deg):
    return _vsp_g.FitAfCST(xsec_surf_id, xsec_index, deg)
FitAfCST = _vsp_g.FitAfCST

def GetNumSets():
    return _vsp_g.GetNumSets()
GetNumSets = _vsp_g.GetNumSets

def SetSetName(index, name):
    return _vsp_g.SetSetName(index, name)
SetSetName = _vsp_g.SetSetName

def GetSetName(index):
    return _vsp_g.GetSetName(index)
GetSetName = _vsp_g.GetSetName

def GetGeomSetAtIndex(index):
    return _vsp_g.GetGeomSetAtIndex(index)
GetGeomSetAtIndex = _vsp_g.GetGeomSetAtIndex

def GetGeomSet(name):
    return _vsp_g.GetGeomSet(name)
GetGeomSet = _vsp_g.GetGeomSet

def GetSetIndex(name):
    return _vsp_g.GetSetIndex(name)
GetSetIndex = _vsp_g.GetSetIndex

def GetSetFlag(geom_id, set_index):
    return _vsp_g.GetSetFlag(geom_id, set_index)
GetSetFlag = _vsp_g.GetSetFlag

def SetSetFlag(geom_id, set_index, flag):
    return _vsp_g.SetSetFlag(geom_id, set_index, flag)
SetSetFlag = _vsp_g.SetSetFlag

def ValidParm(id):
    return _vsp_g.ValidParm(id)
ValidParm = _vsp_g.ValidParm

def SetParmVal(*args):
    return _vsp_g.SetParmVal(*args)
SetParmVal = _vsp_g.SetParmVal

def SetParmValLimits(parm_id, val, lower_limit, upper_limit):
    return _vsp_g.SetParmValLimits(parm_id, val, lower_limit, upper_limit)
SetParmValLimits = _vsp_g.SetParmValLimits

def SetParmValUpdate(*args):
    return _vsp_g.SetParmValUpdate(*args)
SetParmValUpdate = _vsp_g.SetParmValUpdate

def GetParmVal(*args):
    return _vsp_g.GetParmVal(*args)
GetParmVal = _vsp_g.GetParmVal

def GetIntParmVal(parm_id):
    return _vsp_g.GetIntParmVal(parm_id)
GetIntParmVal = _vsp_g.GetIntParmVal

def GetBoolParmVal(parm_id):
    return _vsp_g.GetBoolParmVal(parm_id)
GetBoolParmVal = _vsp_g.GetBoolParmVal

def SetParmUpperLimit(parm_id, val):
    return _vsp_g.SetParmUpperLimit(parm_id, val)
SetParmUpperLimit = _vsp_g.SetParmUpperLimit

def GetParmUpperLimit(parm_id):
    return _vsp_g.GetParmUpperLimit(parm_id)
GetParmUpperLimit = _vsp_g.GetParmUpperLimit

def SetParmLowerLimit(parm_id, val):
    return _vsp_g.SetParmLowerLimit(parm_id, val)
SetParmLowerLimit = _vsp_g.SetParmLowerLimit

def GetParmLowerLimit(parm_id):
    return _vsp_g.GetParmLowerLimit(parm_id)
GetParmLowerLimit = _vsp_g.GetParmLowerLimit

def GetParmType(parm_id):
    return _vsp_g.GetParmType(parm_id)
GetParmType = _vsp_g.GetParmType

def GetParmName(parm_id):
    return _vsp_g.GetParmName(parm_id)
GetParmName = _vsp_g.GetParmName

def GetParmGroupName(parm_id):
    return _vsp_g.GetParmGroupName(parm_id)
GetParmGroupName = _vsp_g.GetParmGroupName

def GetParmDisplayGroupName(parm_id):
    return _vsp_g.GetParmDisplayGroupName(parm_id)
GetParmDisplayGroupName = _vsp_g.GetParmDisplayGroupName

def GetParmContainer(parm_id):
    return _vsp_g.GetParmContainer(parm_id)
GetParmContainer = _vsp_g.GetParmContainer

def SetParmDescript(parm_id, desc):
    return _vsp_g.SetParmDescript(parm_id, desc)
SetParmDescript = _vsp_g.SetParmDescript

def FindParm(parm_container_id, name, group):
    return _vsp_g.FindParm(parm_container_id, name, group)
FindParm = _vsp_g.FindParm

def FindContainers():
    return _vsp_g.FindContainers()
FindContainers = _vsp_g.FindContainers

def FindContainersWithName(name):
    return _vsp_g.FindContainersWithName(name)
FindContainersWithName = _vsp_g.FindContainersWithName

def FindContainer(name, index):
    return _vsp_g.FindContainer(name, index)
FindContainer = _vsp_g.FindContainer

def GetContainerName(parm_container_id):
    return _vsp_g.GetContainerName(parm_container_id)
GetContainerName = _vsp_g.GetContainerName

def FindContainerGroupNames(parm_container_id):
    return _vsp_g.FindContainerGroupNames(parm_container_id)
FindContainerGroupNames = _vsp_g.FindContainerGroupNames

def FindContainerParmIDs(parm_container_id):
    return _vsp_g.FindContainerParmIDs(parm_container_id)
FindContainerParmIDs = _vsp_g.FindContainerParmIDs

def AddVec3D(INOUT, x, y, z):
    return _vsp_g.AddVec3D(INOUT, x, y, z)
AddVec3D = _vsp_g.AddVec3D
class vec3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vec3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vec3d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["v"] = _vsp_g.vec3d_v_set
    __swig_getmethods__["v"] = _vsp_g.vec3d_v_get
    if _newclass:
        v = _swig_property(_vsp_g.vec3d_v_get, _vsp_g.vec3d_v_set)
    __swig_destroy__ = _vsp_g.delete_vec3d
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _vsp_g.new_vec3d(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def set_xyz(self, xx, yy, zz):
        return _vsp_g.vec3d_set_xyz(self, xx, yy, zz)

    def set_x(self, xx):
        return _vsp_g.vec3d_set_x(self, xx)

    def set_y(self, yy):
        return _vsp_g.vec3d_set_y(self, yy)

    def set_z(self, zz):
        return _vsp_g.vec3d_set_z(self, zz)

    def get_pnt(self, *args):
        return _vsp_g.vec3d_get_pnt(self, *args)

    def x(self):
        return _vsp_g.vec3d_x(self)

    def y(self):
        return _vsp_g.vec3d_y(self)

    def z(self):
        return _vsp_g.vec3d_z(self)

    def data(self):
        return _vsp_g.vec3d_data(self)

    def rotate_x(self, cos_alpha, sin_alpha):
        return _vsp_g.vec3d_rotate_x(self, cos_alpha, sin_alpha)

    def rotate_y(self, cos_alpha, sin_alpha):
        return _vsp_g.vec3d_rotate_y(self, cos_alpha, sin_alpha)

    def rotate_z(self, cos_alpha, sin_alpha):
        return _vsp_g.vec3d_rotate_z(self, cos_alpha, sin_alpha)

    def scale_x(self, scale):
        return _vsp_g.vec3d_scale_x(self, scale)

    def scale_y(self, scale):
        return _vsp_g.vec3d_scale_y(self, scale)

    def scale_z(self, scale):
        return _vsp_g.vec3d_scale_z(self, scale)

    def offset_x(self, offset):
        return _vsp_g.vec3d_offset_x(self, offset)

    def offset_y(self, offset):
        return _vsp_g.vec3d_offset_y(self, offset)

    def offset_z(self, offset):
        return _vsp_g.vec3d_offset_z(self, offset)

    def rotate_z_zero_x(self, cos_alpha, sin_alpha):
        return _vsp_g.vec3d_rotate_z_zero_x(self, cos_alpha, sin_alpha)

    def rotate_z_zero_y(self, cos_alpha, sin_alpha):
        return _vsp_g.vec3d_rotate_z_zero_y(self, cos_alpha, sin_alpha)

    def reflect_xy(self):
        return _vsp_g.vec3d_reflect_xy(self)

    def reflect_xz(self):
        return _vsp_g.vec3d_reflect_xz(self)

    def reflect_yz(self):
        return _vsp_g.vec3d_reflect_yz(self)

    def mag(self):
        return _vsp_g.vec3d_mag(self)

    def normalize(self):
        return _vsp_g.vec3d_normalize(self)

    def major_comp(self):
        return _vsp_g.vec3d_major_comp(self)

    def minor_comp(self):
        return _vsp_g.vec3d_minor_comp(self)
vec3d_swigregister = _vsp_g.vec3d_swigregister
vec3d_swigregister(vec3d)
cvar = _vsp_g.cvar

def dist(a, b):
    return _vsp_g.dist(a, b)
dist = _vsp_g.dist

def dist_squared(a, b):
    return _vsp_g.dist_squared(a, b)
dist_squared = _vsp_g.dist_squared

def dot(a, b):
    return _vsp_g.dot(a, b)
dot = _vsp_g.dot

def cross(a, b):
    return _vsp_g.cross(a, b)
cross = _vsp_g.cross

def angle(a, b):
    return _vsp_g.angle(a, b)
angle = _vsp_g.angle

def signed_angle(a, b, ref):
    return _vsp_g.signed_angle(a, b, ref)
signed_angle = _vsp_g.signed_angle

def cos_angle(a, b):
    return _vsp_g.cos_angle(a, b)
cos_angle = _vsp_g.cos_angle

def radius_of_circle(p1, p2, p3):
    return _vsp_g.radius_of_circle(p1, p2, p3)
radius_of_circle = _vsp_g.radius_of_circle

def center_of_circle(p1, p2, p3, center):
    return _vsp_g.center_of_circle(p1, p2, p3, center)
center_of_circle = _vsp_g.center_of_circle

def dist_pnt_2_plane(org, norm, pnt):
    return _vsp_g.dist_pnt_2_plane(org, norm, pnt)
dist_pnt_2_plane = _vsp_g.dist_pnt_2_plane

def dist_pnt_2_line(line_pt1, line_pt2, pnt):
    return _vsp_g.dist_pnt_2_line(line_pt1, line_pt2, pnt)
dist_pnt_2_line = _vsp_g.dist_pnt_2_line

def proj_pnt_on_line_seg(line_pt1, line_pt2, pnt):
    return _vsp_g.proj_pnt_on_line_seg(line_pt1, line_pt2, pnt)
proj_pnt_on_line_seg = _vsp_g.proj_pnt_on_line_seg

def proj_pnt_on_ray(line_pt1, line_pt2, pnt):
    return _vsp_g.proj_pnt_on_ray(line_pt1, line_pt2, pnt)
proj_pnt_on_ray = _vsp_g.proj_pnt_on_ray

def proj_pnt_on_line(line_pt1, line_pt2, pnt):
    return _vsp_g.proj_pnt_on_line(line_pt1, line_pt2, pnt)
proj_pnt_on_line = _vsp_g.proj_pnt_on_line

def proj_pnt_to_plane(org, plane_ln1, plane_ln2, pnt):
    return _vsp_g.proj_pnt_to_plane(org, plane_ln1, plane_ln2, pnt)
proj_pnt_to_plane = _vsp_g.proj_pnt_to_plane

def tri_seg_intersect(A, B, C, D, E, u, w, t):
    return _vsp_g.tri_seg_intersect(A, B, C, D, E, u, w, t)
tri_seg_intersect = _vsp_g.tri_seg_intersect

def tri_ray_intersect(A, B, C, D, E, u, w, t):
    return _vsp_g.tri_ray_intersect(A, B, C, D, E, u, w, t)
tri_ray_intersect = _vsp_g.tri_ray_intersect

def plane_ray_intersect(*args):
    return _vsp_g.plane_ray_intersect(*args)
plane_ray_intersect = _vsp_g.plane_ray_intersect

def ray_ray_intersect(A, B, C, D, int_pnt1, int_pnt2):
    return _vsp_g.ray_ray_intersect(A, B, C, D, int_pnt1, int_pnt2)
ray_ray_intersect = _vsp_g.ray_ray_intersect

def tetra_volume(A, B, C):
    return _vsp_g.tetra_volume(A, B, C)
tetra_volume = _vsp_g.tetra_volume

def area(A, B, C):
    return _vsp_g.area(A, B, C)
area = _vsp_g.area

def poly_area(pnt_vec):
    return _vsp_g.poly_area(pnt_vec)
poly_area = _vsp_g.poly_area

def dist3D_Segment_to_Segment(*args):
    return _vsp_g.dist3D_Segment_to_Segment(*args)
dist3D_Segment_to_Segment = _vsp_g.dist3D_Segment_to_Segment

def nearSegSeg(L0, L1, S0, S1, Lt, Ln, St, Sn):
    return _vsp_g.nearSegSeg(L0, L1, S0, S1, Lt, Ln, St, Sn)
nearSegSeg = _vsp_g.nearSegSeg

def pointLineDistSquared(p, lp0, lp1, t):
    return _vsp_g.pointLineDistSquared(p, lp0, lp1, t)
pointLineDistSquared = _vsp_g.pointLineDistSquared

def pointSegDistSquared(p, sp0, sp1, t):
    return _vsp_g.pointSegDistSquared(p, sp0, sp1, t)
pointSegDistSquared = _vsp_g.pointSegDistSquared

def point_on_line(lp0, lp1, t):
    return _vsp_g.point_on_line(lp0, lp1, t)
point_on_line = _vsp_g.point_on_line

def MapToPlane(p, planeOrig, planeVec1, planeVec2):
    return _vsp_g.MapToPlane(p, planeOrig, planeVec1, planeVec2)
MapToPlane = _vsp_g.MapToPlane

def MapFromPlane(uw, planeOrig, planeVec1, planeVec2):
    return _vsp_g.MapFromPlane(uw, planeOrig, planeVec1, planeVec2)
MapFromPlane = _vsp_g.MapFromPlane

def plane_half_space(planeOrig, planeNorm, pnt):
    return _vsp_g.plane_half_space(planeOrig, planeNorm, pnt)
plane_half_space = _vsp_g.plane_half_space

def line_line_intersect(p1, p2, p3, p4, s, t):
    return _vsp_g.line_line_intersect(p1, p2, p3, p4, s, t)
line_line_intersect = _vsp_g.line_line_intersect

def RotateArbAxis(p, theta, r):
    return _vsp_g.RotateArbAxis(p, theta, r)
RotateArbAxis = _vsp_g.RotateArbAxis

def BarycentricWeights(v0, v1, v2, p):
    return _vsp_g.BarycentricWeights(v0, v1, v2, p)
BarycentricWeights = _vsp_g.BarycentricWeights

def BilinearWeights(p0, p1, p, weights):
    return _vsp_g.BilinearWeights(p0, p1, p, weights)
BilinearWeights = _vsp_g.BilinearWeights

# This file is compatible with both classic and new-style classes.


