# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_vsp', [dirname(__file__)])
        except ImportError:
            import _vsp
            return _vsp
        if fp is not None:
            try:
                _mod = imp.load_module('_vsp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _vsp = swig_import_helper()
    del swig_import_helper
else:
    import _vsp
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vsp.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _vsp.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _vsp.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _vsp.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _vsp.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _vsp.SwigPyIterator_equal(self, x)

    def copy(self):
        return _vsp.SwigPyIterator_copy(self)

    def next(self):
        return _vsp.SwigPyIterator_next(self)

    def __next__(self):
        return _vsp.SwigPyIterator___next__(self)

    def previous(self):
        return _vsp.SwigPyIterator_previous(self)

    def advance(self, n):
        return _vsp.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _vsp.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _vsp.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _vsp.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _vsp.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _vsp.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _vsp.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _vsp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _vsp.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vsp.IntVector___nonzero__(self)

    def __bool__(self):
        return _vsp.IntVector___bool__(self)

    def __len__(self):
        return _vsp.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _vsp.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vsp.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vsp.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vsp.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vsp.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vsp.IntVector___setitem__(self, *args)

    def pop(self):
        return _vsp.IntVector_pop(self)

    def append(self, x):
        return _vsp.IntVector_append(self, x)

    def empty(self):
        return _vsp.IntVector_empty(self)

    def size(self):
        return _vsp.IntVector_size(self)

    def swap(self, v):
        return _vsp.IntVector_swap(self, v)

    def begin(self):
        return _vsp.IntVector_begin(self)

    def end(self):
        return _vsp.IntVector_end(self)

    def rbegin(self):
        return _vsp.IntVector_rbegin(self)

    def rend(self):
        return _vsp.IntVector_rend(self)

    def clear(self):
        return _vsp.IntVector_clear(self)

    def get_allocator(self):
        return _vsp.IntVector_get_allocator(self)

    def pop_back(self):
        return _vsp.IntVector_pop_back(self)

    def erase(self, *args):
        return _vsp.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _vsp.new_IntVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _vsp.IntVector_push_back(self, x)

    def front(self):
        return _vsp.IntVector_front(self)

    def back(self):
        return _vsp.IntVector_back(self)

    def assign(self, n, x):
        return _vsp.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _vsp.IntVector_resize(self, *args)

    def insert(self, *args):
        return _vsp.IntVector_insert(self, *args)

    def reserve(self, n):
        return _vsp.IntVector_reserve(self, n)

    def capacity(self):
        return _vsp.IntVector_capacity(self)
    __swig_destroy__ = _vsp.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _vsp.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _vsp.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vsp.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _vsp.DoubleVector___bool__(self)

    def __len__(self):
        return _vsp.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _vsp.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vsp.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vsp.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vsp.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vsp.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vsp.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _vsp.DoubleVector_pop(self)

    def append(self, x):
        return _vsp.DoubleVector_append(self, x)

    def empty(self):
        return _vsp.DoubleVector_empty(self)

    def size(self):
        return _vsp.DoubleVector_size(self)

    def swap(self, v):
        return _vsp.DoubleVector_swap(self, v)

    def begin(self):
        return _vsp.DoubleVector_begin(self)

    def end(self):
        return _vsp.DoubleVector_end(self)

    def rbegin(self):
        return _vsp.DoubleVector_rbegin(self)

    def rend(self):
        return _vsp.DoubleVector_rend(self)

    def clear(self):
        return _vsp.DoubleVector_clear(self)

    def get_allocator(self):
        return _vsp.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _vsp.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _vsp.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _vsp.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _vsp.DoubleVector_push_back(self, x)

    def front(self):
        return _vsp.DoubleVector_front(self)

    def back(self):
        return _vsp.DoubleVector_back(self)

    def assign(self, n, x):
        return _vsp.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _vsp.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _vsp.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _vsp.DoubleVector_reserve(self, n)

    def capacity(self):
        return _vsp.DoubleVector_capacity(self)
    __swig_destroy__ = _vsp.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _vsp.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _vsp.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vsp.StringVector___nonzero__(self)

    def __bool__(self):
        return _vsp.StringVector___bool__(self)

    def __len__(self):
        return _vsp.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _vsp.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vsp.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vsp.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vsp.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vsp.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vsp.StringVector___setitem__(self, *args)

    def pop(self):
        return _vsp.StringVector_pop(self)

    def append(self, x):
        return _vsp.StringVector_append(self, x)

    def empty(self):
        return _vsp.StringVector_empty(self)

    def size(self):
        return _vsp.StringVector_size(self)

    def swap(self, v):
        return _vsp.StringVector_swap(self, v)

    def begin(self):
        return _vsp.StringVector_begin(self)

    def end(self):
        return _vsp.StringVector_end(self)

    def rbegin(self):
        return _vsp.StringVector_rbegin(self)

    def rend(self):
        return _vsp.StringVector_rend(self)

    def clear(self):
        return _vsp.StringVector_clear(self)

    def get_allocator(self):
        return _vsp.StringVector_get_allocator(self)

    def pop_back(self):
        return _vsp.StringVector_pop_back(self)

    def erase(self, *args):
        return _vsp.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _vsp.new_StringVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _vsp.StringVector_push_back(self, x)

    def front(self):
        return _vsp.StringVector_front(self)

    def back(self):
        return _vsp.StringVector_back(self)

    def assign(self, n, x):
        return _vsp.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _vsp.StringVector_resize(self, *args)

    def insert(self, *args):
        return _vsp.StringVector_insert(self, *args)

    def reserve(self, n):
        return _vsp.StringVector_reserve(self, n)

    def capacity(self):
        return _vsp.StringVector_capacity(self)
    __swig_destroy__ = _vsp.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _vsp.StringVector_swigregister
StringVector_swigregister(StringVector)

class DoubleVecVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVecVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVecVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _vsp.DoubleVecVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vsp.DoubleVecVec___nonzero__(self)

    def __bool__(self):
        return _vsp.DoubleVecVec___bool__(self)

    def __len__(self):
        return _vsp.DoubleVecVec___len__(self)

    def __getslice__(self, i, j):
        return _vsp.DoubleVecVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vsp.DoubleVecVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vsp.DoubleVecVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vsp.DoubleVecVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vsp.DoubleVecVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vsp.DoubleVecVec___setitem__(self, *args)

    def pop(self):
        return _vsp.DoubleVecVec_pop(self)

    def append(self, x):
        return _vsp.DoubleVecVec_append(self, x)

    def empty(self):
        return _vsp.DoubleVecVec_empty(self)

    def size(self):
        return _vsp.DoubleVecVec_size(self)

    def swap(self, v):
        return _vsp.DoubleVecVec_swap(self, v)

    def begin(self):
        return _vsp.DoubleVecVec_begin(self)

    def end(self):
        return _vsp.DoubleVecVec_end(self)

    def rbegin(self):
        return _vsp.DoubleVecVec_rbegin(self)

    def rend(self):
        return _vsp.DoubleVecVec_rend(self)

    def clear(self):
        return _vsp.DoubleVecVec_clear(self)

    def get_allocator(self):
        return _vsp.DoubleVecVec_get_allocator(self)

    def pop_back(self):
        return _vsp.DoubleVecVec_pop_back(self)

    def erase(self, *args):
        return _vsp.DoubleVecVec_erase(self, *args)

    def __init__(self, *args):
        this = _vsp.new_DoubleVecVec(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _vsp.DoubleVecVec_push_back(self, x)

    def front(self):
        return _vsp.DoubleVecVec_front(self)

    def back(self):
        return _vsp.DoubleVecVec_back(self)

    def assign(self, n, x):
        return _vsp.DoubleVecVec_assign(self, n, x)

    def resize(self, *args):
        return _vsp.DoubleVecVec_resize(self, *args)

    def insert(self, *args):
        return _vsp.DoubleVecVec_insert(self, *args)

    def reserve(self, n):
        return _vsp.DoubleVecVec_reserve(self, n)

    def capacity(self):
        return _vsp.DoubleVecVec_capacity(self)
    __swig_destroy__ = _vsp.delete_DoubleVecVec
    __del__ = lambda self: None
DoubleVecVec_swigregister = _vsp.DoubleVecVec_swigregister
DoubleVecVec_swigregister(DoubleVecVec)

class Vec3dVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3dVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3dVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _vsp.Vec3dVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vsp.Vec3dVec___nonzero__(self)

    def __bool__(self):
        return _vsp.Vec3dVec___bool__(self)

    def __len__(self):
        return _vsp.Vec3dVec___len__(self)

    def __getslice__(self, i, j):
        return _vsp.Vec3dVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vsp.Vec3dVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vsp.Vec3dVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vsp.Vec3dVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vsp.Vec3dVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vsp.Vec3dVec___setitem__(self, *args)

    def pop(self):
        return _vsp.Vec3dVec_pop(self)

    def append(self, x):
        return _vsp.Vec3dVec_append(self, x)

    def empty(self):
        return _vsp.Vec3dVec_empty(self)

    def size(self):
        return _vsp.Vec3dVec_size(self)

    def swap(self, v):
        return _vsp.Vec3dVec_swap(self, v)

    def begin(self):
        return _vsp.Vec3dVec_begin(self)

    def end(self):
        return _vsp.Vec3dVec_end(self)

    def rbegin(self):
        return _vsp.Vec3dVec_rbegin(self)

    def rend(self):
        return _vsp.Vec3dVec_rend(self)

    def clear(self):
        return _vsp.Vec3dVec_clear(self)

    def get_allocator(self):
        return _vsp.Vec3dVec_get_allocator(self)

    def pop_back(self):
        return _vsp.Vec3dVec_pop_back(self)

    def erase(self, *args):
        return _vsp.Vec3dVec_erase(self, *args)

    def __init__(self, *args):
        this = _vsp.new_Vec3dVec(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _vsp.Vec3dVec_push_back(self, x)

    def front(self):
        return _vsp.Vec3dVec_front(self)

    def back(self):
        return _vsp.Vec3dVec_back(self)

    def assign(self, n, x):
        return _vsp.Vec3dVec_assign(self, n, x)

    def resize(self, *args):
        return _vsp.Vec3dVec_resize(self, *args)

    def insert(self, *args):
        return _vsp.Vec3dVec_insert(self, *args)

    def reserve(self, n):
        return _vsp.Vec3dVec_reserve(self, n)

    def capacity(self):
        return _vsp.Vec3dVec_capacity(self)
    __swig_destroy__ = _vsp.delete_Vec3dVec
    __del__ = lambda self: None
Vec3dVec_swigregister = _vsp.Vec3dVec_swigregister
Vec3dVec_swigregister(Vec3dVec)


_vsp.VSP_OK_swigconstant(_vsp)
VSP_OK = _vsp.VSP_OK

_vsp.VSP_INVALID_PTR_swigconstant(_vsp)
VSP_INVALID_PTR = _vsp.VSP_INVALID_PTR

_vsp.VSP_CANT_FIND_TYPE_swigconstant(_vsp)
VSP_CANT_FIND_TYPE = _vsp.VSP_CANT_FIND_TYPE

_vsp.VSP_CANT_FIND_PARM_swigconstant(_vsp)
VSP_CANT_FIND_PARM = _vsp.VSP_CANT_FIND_PARM

_vsp.VSP_CANT_FIND_NAME_swigconstant(_vsp)
VSP_CANT_FIND_NAME = _vsp.VSP_CANT_FIND_NAME

_vsp.VSP_INVALID_GEOM_ID_swigconstant(_vsp)
VSP_INVALID_GEOM_ID = _vsp.VSP_INVALID_GEOM_ID

_vsp.VSP_FILE_DOES_NOT_EXIST_swigconstant(_vsp)
VSP_FILE_DOES_NOT_EXIST = _vsp.VSP_FILE_DOES_NOT_EXIST

_vsp.VSP_FILE_WRITE_FAILURE_swigconstant(_vsp)
VSP_FILE_WRITE_FAILURE = _vsp.VSP_FILE_WRITE_FAILURE

_vsp.VSP_WRONG_XSEC_TYPE_swigconstant(_vsp)
VSP_WRONG_XSEC_TYPE = _vsp.VSP_WRONG_XSEC_TYPE

_vsp.VSP_WRONG_FILE_TYPE_swigconstant(_vsp)
VSP_WRONG_FILE_TYPE = _vsp.VSP_WRONG_FILE_TYPE

_vsp.VSP_INDEX_OUT_RANGE_swigconstant(_vsp)
VSP_INDEX_OUT_RANGE = _vsp.VSP_INDEX_OUT_RANGE

_vsp.VSP_INVALID_XSEC_ID_swigconstant(_vsp)
VSP_INVALID_XSEC_ID = _vsp.VSP_INVALID_XSEC_ID

_vsp.VSP_INVALID_ID_swigconstant(_vsp)
VSP_INVALID_ID = _vsp.VSP_INVALID_ID

_vsp.VSP_CANT_SET_NOT_EQ_PARM_swigconstant(_vsp)
VSP_CANT_SET_NOT_EQ_PARM = _vsp.VSP_CANT_SET_NOT_EQ_PARM

_vsp.SYM_XY_swigconstant(_vsp)
SYM_XY = _vsp.SYM_XY

_vsp.SYM_XZ_swigconstant(_vsp)
SYM_XZ = _vsp.SYM_XZ

_vsp.SYM_YZ_swigconstant(_vsp)
SYM_YZ = _vsp.SYM_YZ

_vsp.SYM_ROT_X_swigconstant(_vsp)
SYM_ROT_X = _vsp.SYM_ROT_X

_vsp.SYM_ROT_Y_swigconstant(_vsp)
SYM_ROT_Y = _vsp.SYM_ROT_Y

_vsp.SYM_ROT_Z_swigconstant(_vsp)
SYM_ROT_Z = _vsp.SYM_ROT_Z

_vsp.SYM_PLANAR_TYPES_swigconstant(_vsp)
SYM_PLANAR_TYPES = _vsp.SYM_PLANAR_TYPES

_vsp.SYM_NUM_TYPES_swigconstant(_vsp)
SYM_NUM_TYPES = _vsp.SYM_NUM_TYPES

_vsp.XSEC_FUSE_swigconstant(_vsp)
XSEC_FUSE = _vsp.XSEC_FUSE

_vsp.XSEC_STACK_swigconstant(_vsp)
XSEC_STACK = _vsp.XSEC_STACK

_vsp.XSEC_WING_swigconstant(_vsp)
XSEC_WING = _vsp.XSEC_WING

_vsp.XSEC_CUSTOM_swigconstant(_vsp)
XSEC_CUSTOM = _vsp.XSEC_CUSTOM

_vsp.XSEC_NUM_TYPES_swigconstant(_vsp)
XSEC_NUM_TYPES = _vsp.XSEC_NUM_TYPES

_vsp.X_DIR_swigconstant(_vsp)
X_DIR = _vsp.X_DIR

_vsp.Y_DIR_swigconstant(_vsp)
Y_DIR = _vsp.Y_DIR

_vsp.Z_DIR_swigconstant(_vsp)
Z_DIR = _vsp.Z_DIR

_vsp.LEN_MM_swigconstant(_vsp)
LEN_MM = _vsp.LEN_MM

_vsp.LEN_CM_swigconstant(_vsp)
LEN_CM = _vsp.LEN_CM

_vsp.LEN_M_swigconstant(_vsp)
LEN_M = _vsp.LEN_M

_vsp.LEN_IN_swigconstant(_vsp)
LEN_IN = _vsp.LEN_IN

_vsp.LEN_FT_swigconstant(_vsp)
LEN_FT = _vsp.LEN_FT

_vsp.LEN_YD_swigconstant(_vsp)
LEN_YD = _vsp.LEN_YD

_vsp.ANG_RAD_swigconstant(_vsp)
ANG_RAD = _vsp.ANG_RAD

_vsp.ANG_DEG_swigconstant(_vsp)
ANG_DEG = _vsp.ANG_DEG

_vsp.XS_SHIFT_LE_swigconstant(_vsp)
XS_SHIFT_LE = _vsp.XS_SHIFT_LE

_vsp.XS_SHIFT_MID_swigconstant(_vsp)
XS_SHIFT_MID = _vsp.XS_SHIFT_MID

_vsp.XS_SHIFT_TE_swigconstant(_vsp)
XS_SHIFT_TE = _vsp.XS_SHIFT_TE

_vsp.XS_POINT_swigconstant(_vsp)
XS_POINT = _vsp.XS_POINT

_vsp.XS_CIRCLE_swigconstant(_vsp)
XS_CIRCLE = _vsp.XS_CIRCLE

_vsp.XS_ELLIPSE_swigconstant(_vsp)
XS_ELLIPSE = _vsp.XS_ELLIPSE

_vsp.XS_SUPER_ELLIPSE_swigconstant(_vsp)
XS_SUPER_ELLIPSE = _vsp.XS_SUPER_ELLIPSE

_vsp.XS_ROUNDED_RECTANGLE_swigconstant(_vsp)
XS_ROUNDED_RECTANGLE = _vsp.XS_ROUNDED_RECTANGLE

_vsp.XS_GENERAL_FUSE_swigconstant(_vsp)
XS_GENERAL_FUSE = _vsp.XS_GENERAL_FUSE

_vsp.XS_FILE_FUSE_swigconstant(_vsp)
XS_FILE_FUSE = _vsp.XS_FILE_FUSE

_vsp.XS_FOUR_SERIES_swigconstant(_vsp)
XS_FOUR_SERIES = _vsp.XS_FOUR_SERIES

_vsp.XS_SIX_SERIES_swigconstant(_vsp)
XS_SIX_SERIES = _vsp.XS_SIX_SERIES

_vsp.XS_BICONVEX_swigconstant(_vsp)
XS_BICONVEX = _vsp.XS_BICONVEX

_vsp.XS_WEDGE_swigconstant(_vsp)
XS_WEDGE = _vsp.XS_WEDGE

_vsp.XS_BEZIER_swigconstant(_vsp)
XS_BEZIER = _vsp.XS_BEZIER

_vsp.XS_FILE_AIRFOIL_swigconstant(_vsp)
XS_FILE_AIRFOIL = _vsp.XS_FILE_AIRFOIL

_vsp.XS_CST_AIRFOIL_swigconstant(_vsp)
XS_CST_AIRFOIL = _vsp.XS_CST_AIRFOIL

_vsp.XS_NUM_TYPES_swigconstant(_vsp)
XS_NUM_TYPES = _vsp.XS_NUM_TYPES

_vsp.CLOSE_NONE_swigconstant(_vsp)
CLOSE_NONE = _vsp.CLOSE_NONE

_vsp.CLOSE_SKEWLOW_swigconstant(_vsp)
CLOSE_SKEWLOW = _vsp.CLOSE_SKEWLOW

_vsp.CLOSE_SKEWUP_swigconstant(_vsp)
CLOSE_SKEWUP = _vsp.CLOSE_SKEWUP

_vsp.CLOSE_SKEWBOTH_swigconstant(_vsp)
CLOSE_SKEWBOTH = _vsp.CLOSE_SKEWBOTH

_vsp.CLOSE_EXTRAP_swigconstant(_vsp)
CLOSE_EXTRAP = _vsp.CLOSE_EXTRAP

_vsp.CLOSE_NUM_TYPES_swigconstant(_vsp)
CLOSE_NUM_TYPES = _vsp.CLOSE_NUM_TYPES

_vsp.TRIM_NONE_swigconstant(_vsp)
TRIM_NONE = _vsp.TRIM_NONE

_vsp.TRIM_X_swigconstant(_vsp)
TRIM_X = _vsp.TRIM_X

_vsp.TRIM_THICK_swigconstant(_vsp)
TRIM_THICK = _vsp.TRIM_THICK

_vsp.TRIM_NUM_TYPES_swigconstant(_vsp)
TRIM_NUM_TYPES = _vsp.TRIM_NUM_TYPES

_vsp.ABS_swigconstant(_vsp)
ABS = _vsp.ABS

_vsp.REL_swigconstant(_vsp)
REL = _vsp.REL

_vsp.XSEC_BOTH_SIDES_swigconstant(_vsp)
XSEC_BOTH_SIDES = _vsp.XSEC_BOTH_SIDES

_vsp.XSEC_LEFT_SIDE_swigconstant(_vsp)
XSEC_LEFT_SIDE = _vsp.XSEC_LEFT_SIDE

_vsp.XSEC_RIGHT_SIDE_swigconstant(_vsp)
XSEC_RIGHT_SIDE = _vsp.XSEC_RIGHT_SIDE

_vsp.IMPORT_STL_swigconstant(_vsp)
IMPORT_STL = _vsp.IMPORT_STL

_vsp.IMPORT_NASCART_swigconstant(_vsp)
IMPORT_NASCART = _vsp.IMPORT_NASCART

_vsp.IMPORT_CART3D_TRI_swigconstant(_vsp)
IMPORT_CART3D_TRI = _vsp.IMPORT_CART3D_TRI

_vsp.IMPORT_XSEC_MESH_swigconstant(_vsp)
IMPORT_XSEC_MESH = _vsp.IMPORT_XSEC_MESH

_vsp.IMPORT_PTS_swigconstant(_vsp)
IMPORT_PTS = _vsp.IMPORT_PTS

_vsp.EXPORT_FELISA_swigconstant(_vsp)
EXPORT_FELISA = _vsp.EXPORT_FELISA

_vsp.EXPORT_XSEC_swigconstant(_vsp)
EXPORT_XSEC = _vsp.EXPORT_XSEC

_vsp.EXPORT_STL_swigconstant(_vsp)
EXPORT_STL = _vsp.EXPORT_STL

_vsp.EXPORT_AWAVE_swigconstant(_vsp)
EXPORT_AWAVE = _vsp.EXPORT_AWAVE

_vsp.EXPORT_NASCART_swigconstant(_vsp)
EXPORT_NASCART = _vsp.EXPORT_NASCART

_vsp.EXPORT_POVRAY_swigconstant(_vsp)
EXPORT_POVRAY = _vsp.EXPORT_POVRAY

_vsp.EXPORT_CART3D_swigconstant(_vsp)
EXPORT_CART3D = _vsp.EXPORT_CART3D

_vsp.EXPORT_VORXSEC_swigconstant(_vsp)
EXPORT_VORXSEC = _vsp.EXPORT_VORXSEC

_vsp.EXPORT_XSECGEOM_swigconstant(_vsp)
EXPORT_XSECGEOM = _vsp.EXPORT_XSECGEOM

_vsp.EXPORT_GMSH_swigconstant(_vsp)
EXPORT_GMSH = _vsp.EXPORT_GMSH

_vsp.EXPORT_X3D_swigconstant(_vsp)
EXPORT_X3D = _vsp.EXPORT_X3D

_vsp.EXPORT_STEP_swigconstant(_vsp)
EXPORT_STEP = _vsp.EXPORT_STEP

_vsp.EXPORT_PLOT3D_swigconstant(_vsp)
EXPORT_PLOT3D = _vsp.EXPORT_PLOT3D

_vsp.EXPORT_IGES_swigconstant(_vsp)
EXPORT_IGES = _vsp.EXPORT_IGES

_vsp.NO_FILE_TYPE_swigconstant(_vsp)
NO_FILE_TYPE = _vsp.NO_FILE_TYPE

_vsp.COMP_GEOM_TXT_TYPE_swigconstant(_vsp)
COMP_GEOM_TXT_TYPE = _vsp.COMP_GEOM_TXT_TYPE

_vsp.COMP_GEOM_CSV_TYPE_swigconstant(_vsp)
COMP_GEOM_CSV_TYPE = _vsp.COMP_GEOM_CSV_TYPE

_vsp.DRAG_BUILD_TSV_TYPE_swigconstant(_vsp)
DRAG_BUILD_TSV_TYPE = _vsp.DRAG_BUILD_TSV_TYPE

_vsp.SLICE_TXT_TYPE_swigconstant(_vsp)
SLICE_TXT_TYPE = _vsp.SLICE_TXT_TYPE

_vsp.MASS_PROP_TXT_TYPE_swigconstant(_vsp)
MASS_PROP_TXT_TYPE = _vsp.MASS_PROP_TXT_TYPE

_vsp.DEGEN_GEOM_CSV_TYPE_swigconstant(_vsp)
DEGEN_GEOM_CSV_TYPE = _vsp.DEGEN_GEOM_CSV_TYPE

_vsp.DEGEN_GEOM_M_TYPE_swigconstant(_vsp)
DEGEN_GEOM_M_TYPE = _vsp.DEGEN_GEOM_M_TYPE

_vsp.CFD_STL_TYPE_swigconstant(_vsp)
CFD_STL_TYPE = _vsp.CFD_STL_TYPE

_vsp.CFD_POLY_TYPE_swigconstant(_vsp)
CFD_POLY_TYPE = _vsp.CFD_POLY_TYPE

_vsp.CFD_TRI_TYPE_swigconstant(_vsp)
CFD_TRI_TYPE = _vsp.CFD_TRI_TYPE

_vsp.CFD_OBJ_TYPE_swigconstant(_vsp)
CFD_OBJ_TYPE = _vsp.CFD_OBJ_TYPE

_vsp.CFD_DAT_TYPE_swigconstant(_vsp)
CFD_DAT_TYPE = _vsp.CFD_DAT_TYPE

_vsp.CFD_KEY_TYPE_swigconstant(_vsp)
CFD_KEY_TYPE = _vsp.CFD_KEY_TYPE

_vsp.CFD_GMSH_TYPE_swigconstant(_vsp)
CFD_GMSH_TYPE = _vsp.CFD_GMSH_TYPE

_vsp.CFD_SRF_TYPE_swigconstant(_vsp)
CFD_SRF_TYPE = _vsp.CFD_SRF_TYPE

_vsp.CFD_TKEY_TYPE_swigconstant(_vsp)
CFD_TKEY_TYPE = _vsp.CFD_TKEY_TYPE

_vsp.SLICE_PLANAR_swigconstant(_vsp)
SLICE_PLANAR = _vsp.SLICE_PLANAR

_vsp.SLICE_AWAVE_swigconstant(_vsp)
SLICE_AWAVE = _vsp.SLICE_AWAVE

_vsp.SET_ALL_swigconstant(_vsp)
SET_ALL = _vsp.SET_ALL

_vsp.SET_SHOWN_swigconstant(_vsp)
SET_SHOWN = _vsp.SET_SHOWN

_vsp.SET_NOT_SHOWN_swigconstant(_vsp)
SET_NOT_SHOWN = _vsp.SET_NOT_SHOWN

_vsp.SET_FIRST_USER_swigconstant(_vsp)
SET_FIRST_USER = _vsp.SET_FIRST_USER

_vsp.INT_DATA_swigconstant(_vsp)
INT_DATA = _vsp.INT_DATA

_vsp.DOUBLE_DATA_swigconstant(_vsp)
DOUBLE_DATA = _vsp.DOUBLE_DATA

_vsp.STRING_DATA_swigconstant(_vsp)
STRING_DATA = _vsp.STRING_DATA

_vsp.VEC3D_DATA_swigconstant(_vsp)
VEC3D_DATA = _vsp.VEC3D_DATA

_vsp.MESH_INDEXED_TRI_swigconstant(_vsp)
MESH_INDEXED_TRI = _vsp.MESH_INDEXED_TRI

_vsp.MESH_SLICE_TRI_swigconstant(_vsp)
MESH_SLICE_TRI = _vsp.MESH_SLICE_TRI

_vsp.GEOM_XSECS_swigconstant(_vsp)
GEOM_XSECS = _vsp.GEOM_XSECS

_vsp.CFD_STL_FILE_NAME_swigconstant(_vsp)
CFD_STL_FILE_NAME = _vsp.CFD_STL_FILE_NAME

_vsp.CFD_POLY_FILE_NAME_swigconstant(_vsp)
CFD_POLY_FILE_NAME = _vsp.CFD_POLY_FILE_NAME

_vsp.CFD_TRI_FILE_NAME_swigconstant(_vsp)
CFD_TRI_FILE_NAME = _vsp.CFD_TRI_FILE_NAME

_vsp.CFD_OBJ_FILE_NAME_swigconstant(_vsp)
CFD_OBJ_FILE_NAME = _vsp.CFD_OBJ_FILE_NAME

_vsp.CFD_DAT_FILE_NAME_swigconstant(_vsp)
CFD_DAT_FILE_NAME = _vsp.CFD_DAT_FILE_NAME

_vsp.CFD_KEY_FILE_NAME_swigconstant(_vsp)
CFD_KEY_FILE_NAME = _vsp.CFD_KEY_FILE_NAME

_vsp.CFD_GMSH_FILE_NAME_swigconstant(_vsp)
CFD_GMSH_FILE_NAME = _vsp.CFD_GMSH_FILE_NAME

_vsp.CFD_SRF_FILE_NAME_swigconstant(_vsp)
CFD_SRF_FILE_NAME = _vsp.CFD_SRF_FILE_NAME

_vsp.CFD_TKEY_FILE_NAME_swigconstant(_vsp)
CFD_TKEY_FILE_NAME = _vsp.CFD_TKEY_FILE_NAME

_vsp.CFD_NUM_FILE_NAMES_swigconstant(_vsp)
CFD_NUM_FILE_NAMES = _vsp.CFD_NUM_FILE_NAMES

_vsp.CFD_MIN_EDGE_LEN_swigconstant(_vsp)
CFD_MIN_EDGE_LEN = _vsp.CFD_MIN_EDGE_LEN

_vsp.CFD_MAX_EDGE_LEN_swigconstant(_vsp)
CFD_MAX_EDGE_LEN = _vsp.CFD_MAX_EDGE_LEN

_vsp.CFD_MAX_GAP_swigconstant(_vsp)
CFD_MAX_GAP = _vsp.CFD_MAX_GAP

_vsp.CFD_NUM_CIRCLE_SEGS_swigconstant(_vsp)
CFD_NUM_CIRCLE_SEGS = _vsp.CFD_NUM_CIRCLE_SEGS

_vsp.CFD_GROWTH_RATIO_swigconstant(_vsp)
CFD_GROWTH_RATIO = _vsp.CFD_GROWTH_RATIO

_vsp.CFD_LIMIT_GROWTH_FLAG_swigconstant(_vsp)
CFD_LIMIT_GROWTH_FLAG = _vsp.CFD_LIMIT_GROWTH_FLAG

_vsp.CFD_INTERSECT_SUBSURFACE_FLAG_swigconstant(_vsp)
CFD_INTERSECT_SUBSURFACE_FLAG = _vsp.CFD_INTERSECT_SUBSURFACE_FLAG

_vsp.CFD_HALF_MESH_FLAG_swigconstant(_vsp)
CFD_HALF_MESH_FLAG = _vsp.CFD_HALF_MESH_FLAG

_vsp.CFD_FAR_FIELD_FLAG_swigconstant(_vsp)
CFD_FAR_FIELD_FLAG = _vsp.CFD_FAR_FIELD_FLAG

_vsp.CFD_FAR_MAX_EDGE_LEN_swigconstant(_vsp)
CFD_FAR_MAX_EDGE_LEN = _vsp.CFD_FAR_MAX_EDGE_LEN

_vsp.CFD_FAR_MAX_GAP_swigconstant(_vsp)
CFD_FAR_MAX_GAP = _vsp.CFD_FAR_MAX_GAP

_vsp.CFD_FAR_NUM_CIRCLE_SEGS_swigconstant(_vsp)
CFD_FAR_NUM_CIRCLE_SEGS = _vsp.CFD_FAR_NUM_CIRCLE_SEGS

_vsp.CFD_FAR_SIZE_ABS_FLAG_swigconstant(_vsp)
CFD_FAR_SIZE_ABS_FLAG = _vsp.CFD_FAR_SIZE_ABS_FLAG

_vsp.CFD_FAR_LENGTH_swigconstant(_vsp)
CFD_FAR_LENGTH = _vsp.CFD_FAR_LENGTH

_vsp.CFD_FAR_WIDTH_swigconstant(_vsp)
CFD_FAR_WIDTH = _vsp.CFD_FAR_WIDTH

_vsp.CFD_FAR_HEIGHT_swigconstant(_vsp)
CFD_FAR_HEIGHT = _vsp.CFD_FAR_HEIGHT

_vsp.CFD_FAR_X_SCALE_swigconstant(_vsp)
CFD_FAR_X_SCALE = _vsp.CFD_FAR_X_SCALE

_vsp.CFD_FAR_Y_SCALE_swigconstant(_vsp)
CFD_FAR_Y_SCALE = _vsp.CFD_FAR_Y_SCALE

_vsp.CFD_FAR_Z_SCALE_swigconstant(_vsp)
CFD_FAR_Z_SCALE = _vsp.CFD_FAR_Z_SCALE

_vsp.CFD_FAR_LOC_MAN_FLAG_swigconstant(_vsp)
CFD_FAR_LOC_MAN_FLAG = _vsp.CFD_FAR_LOC_MAN_FLAG

_vsp.CFD_FAR_LOC_X_swigconstant(_vsp)
CFD_FAR_LOC_X = _vsp.CFD_FAR_LOC_X

_vsp.CFD_FAR_LOC_Y_swigconstant(_vsp)
CFD_FAR_LOC_Y = _vsp.CFD_FAR_LOC_Y

_vsp.CFD_FAR_LOC_Z_swigconstant(_vsp)
CFD_FAR_LOC_Z = _vsp.CFD_FAR_LOC_Z

_vsp.CFD_WAKE_SCALE_swigconstant(_vsp)
CFD_WAKE_SCALE = _vsp.CFD_WAKE_SCALE

_vsp.CFD_WAKE_ANGLE_swigconstant(_vsp)
CFD_WAKE_ANGLE = _vsp.CFD_WAKE_ANGLE

_vsp.POINT_SOURCE_swigconstant(_vsp)
POINT_SOURCE = _vsp.POINT_SOURCE

_vsp.LINE_SOURCE_swigconstant(_vsp)
LINE_SOURCE = _vsp.LINE_SOURCE

_vsp.BOX_SOURCE_swigconstant(_vsp)
BOX_SOURCE = _vsp.BOX_SOURCE

_vsp.NUM_SOURCE_TYPES_swigconstant(_vsp)
NUM_SOURCE_TYPES = _vsp.NUM_SOURCE_TYPES

_vsp.XDDM_VAR_swigconstant(_vsp)
XDDM_VAR = _vsp.XDDM_VAR

_vsp.XDDM_CONST_swigconstant(_vsp)
XDDM_CONST = _vsp.XDDM_CONST

_vsp.NORMAL_SURF_swigconstant(_vsp)
NORMAL_SURF = _vsp.NORMAL_SURF

_vsp.WING_SURF_swigconstant(_vsp)
WING_SURF = _vsp.WING_SURF

_vsp.DISK_SURF_swigconstant(_vsp)
DISK_SURF = _vsp.DISK_SURF

_vsp.NUM_SURF_TYPES_swigconstant(_vsp)
NUM_SURF_TYPES = _vsp.NUM_SURF_TYPES

_vsp.CFD_NORMAL_swigconstant(_vsp)
CFD_NORMAL = _vsp.CFD_NORMAL

_vsp.CFD_NEGATIVE_swigconstant(_vsp)
CFD_NEGATIVE = _vsp.CFD_NEGATIVE

_vsp.CFD_TRANSPARENT_swigconstant(_vsp)
CFD_TRANSPARENT = _vsp.CFD_TRANSPARENT

_vsp.CFD_NUM_TYPES_swigconstant(_vsp)
CFD_NUM_TYPES = _vsp.CFD_NUM_TYPES

_vsp.SS_LINE_swigconstant(_vsp)
SS_LINE = _vsp.SS_LINE

_vsp.SS_RECTANGLE_swigconstant(_vsp)
SS_RECTANGLE = _vsp.SS_RECTANGLE

_vsp.SS_ELLIPSE_swigconstant(_vsp)
SS_ELLIPSE = _vsp.SS_ELLIPSE

_vsp.SS_CONTROL_swigconstant(_vsp)
SS_CONTROL = _vsp.SS_CONTROL

_vsp.SS_NUM_TYPES_swigconstant(_vsp)
SS_NUM_TYPES = _vsp.SS_NUM_TYPES

_vsp.INSIDE_swigconstant(_vsp)
INSIDE = _vsp.INSIDE

_vsp.OUTSIDE_swigconstant(_vsp)
OUTSIDE = _vsp.OUTSIDE

_vsp.AR_WSECT_DRIVER_swigconstant(_vsp)
AR_WSECT_DRIVER = _vsp.AR_WSECT_DRIVER

_vsp.SPAN_WSECT_DRIVER_swigconstant(_vsp)
SPAN_WSECT_DRIVER = _vsp.SPAN_WSECT_DRIVER

_vsp.AREA_WSECT_DRIVER_swigconstant(_vsp)
AREA_WSECT_DRIVER = _vsp.AREA_WSECT_DRIVER

_vsp.TAPER_WSECT_DRIVER_swigconstant(_vsp)
TAPER_WSECT_DRIVER = _vsp.TAPER_WSECT_DRIVER

_vsp.AVEC_WSECT_DRIVER_swigconstant(_vsp)
AVEC_WSECT_DRIVER = _vsp.AVEC_WSECT_DRIVER

_vsp.ROOTC_WSECT_DRIVER_swigconstant(_vsp)
ROOTC_WSECT_DRIVER = _vsp.ROOTC_WSECT_DRIVER

_vsp.TIPC_WSECT_DRIVER_swigconstant(_vsp)
TIPC_WSECT_DRIVER = _vsp.TIPC_WSECT_DRIVER

_vsp.SECSWEEP_WSECT_DRIVER_swigconstant(_vsp)
SECSWEEP_WSECT_DRIVER = _vsp.SECSWEEP_WSECT_DRIVER

_vsp.NUM_WSECT_DRIVER_swigconstant(_vsp)
NUM_WSECT_DRIVER = _vsp.NUM_WSECT_DRIVER

_vsp.SWEEP_WSECT_DRIVER_swigconstant(_vsp)
SWEEP_WSECT_DRIVER = _vsp.SWEEP_WSECT_DRIVER

_vsp.SWEEPLOC_WSECT_DRIVER_swigconstant(_vsp)
SWEEPLOC_WSECT_DRIVER = _vsp.SWEEPLOC_WSECT_DRIVER

_vsp.SECSWEEPLOC_WSECT_DRIVER_swigconstant(_vsp)
SECSWEEPLOC_WSECT_DRIVER = _vsp.SECSWEEPLOC_WSECT_DRIVER
class ErrorObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorObj, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _vsp.new_ErrorObj(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _vsp.delete_ErrorObj
    __del__ = lambda self: None

    def GetErrorCode(self):
        return _vsp.ErrorObj_GetErrorCode(self)

    def GetErrorString(self):
        return _vsp.ErrorObj_GetErrorString(self)
    __swig_setmethods__["m_ErrorCode"] = _vsp.ErrorObj_m_ErrorCode_set
    __swig_getmethods__["m_ErrorCode"] = _vsp.ErrorObj_m_ErrorCode_get
    if _newclass:
        m_ErrorCode = _swig_property(_vsp.ErrorObj_m_ErrorCode_get, _vsp.ErrorObj_m_ErrorCode_set)
    __swig_setmethods__["m_ErrorString"] = _vsp.ErrorObj_m_ErrorString_set
    __swig_getmethods__["m_ErrorString"] = _vsp.ErrorObj_m_ErrorString_get
    if _newclass:
        m_ErrorString = _swig_property(_vsp.ErrorObj_m_ErrorString_get, _vsp.ErrorObj_m_ErrorString_set)

    def NoError(self):
        return _vsp.ErrorObj_NoError(self)
ErrorObj_swigregister = _vsp.ErrorObj_swigregister
ErrorObj_swigregister(ErrorObj)

class ErrorMgrSingleton(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorMgrSingleton, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorMgrSingleton, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetErrorLastCallFlag(self):
        return _vsp.ErrorMgrSingleton_GetErrorLastCallFlag(self)

    def GetNumTotalErrors(self):
        return _vsp.ErrorMgrSingleton_GetNumTotalErrors(self)

    def PopLastError(self):
        return _vsp.ErrorMgrSingleton_PopLastError(self)

    def GetLastError(self):
        return _vsp.ErrorMgrSingleton_GetLastError(self)

    def PopErrorAndPrint(self, stream):
        return _vsp.ErrorMgrSingleton_PopErrorAndPrint(self, stream)

    def AddError(self, code, desc):
        return _vsp.ErrorMgrSingleton_AddError(self, code, desc)

    def NoError(self):
        return _vsp.ErrorMgrSingleton_NoError(self)

    def MessageCallback(self, arg2, data):
        return _vsp.ErrorMgrSingleton_MessageCallback(self, arg2, data)
    __swig_getmethods__["getInstance"] = lambda x: _vsp.ErrorMgrSingleton_getInstance
    if _newclass:
        getInstance = staticmethod(_vsp.ErrorMgrSingleton_getInstance)
ErrorMgrSingleton_swigregister = _vsp.ErrorMgrSingleton_swigregister
ErrorMgrSingleton_swigregister(ErrorMgrSingleton)

def ErrorMgrSingleton_getInstance():
    return _vsp.ErrorMgrSingleton_getInstance()
ErrorMgrSingleton_getInstance = _vsp.ErrorMgrSingleton_getInstance


def VSPCheckSetup():
    return _vsp.VSPCheckSetup()
VSPCheckSetup = _vsp.VSPCheckSetup

def VSPRenew():
    return _vsp.VSPRenew()
VSPRenew = _vsp.VSPRenew

def Update():
    return _vsp.Update()
Update = _vsp.Update

def VSPExit(error_code):
    return _vsp.VSPExit(error_code)
VSPExit = _vsp.VSPExit

def ReadVSPFile(file_name):
    return _vsp.ReadVSPFile(file_name)
ReadVSPFile = _vsp.ReadVSPFile

def WriteVSPFile(*args):
    return _vsp.WriteVSPFile(*args)
WriteVSPFile = _vsp.WriteVSPFile

def GetVSPFileName():
    return _vsp.GetVSPFileName()
GetVSPFileName = _vsp.GetVSPFileName

def ClearVSPModel():
    return _vsp.ClearVSPModel()
ClearVSPModel = _vsp.ClearVSPModel

def InsertVSPFile(file_name, parent_geom_id):
    return _vsp.InsertVSPFile(file_name, parent_geom_id)
InsertVSPFile = _vsp.InsertVSPFile

def ExportFile(file_name, write_set_index, file_type):
    return _vsp.ExportFile(file_name, write_set_index, file_type)
ExportFile = _vsp.ExportFile

def ImportFile(file_name, file_type, parent):
    return _vsp.ImportFile(file_name, file_type, parent)
ImportFile = _vsp.ImportFile

def ReadApplyDESFile(file_name):
    return _vsp.ReadApplyDESFile(file_name)
ReadApplyDESFile = _vsp.ReadApplyDESFile

def WriteDESFile(file_name):
    return _vsp.WriteDESFile(file_name)
WriteDESFile = _vsp.WriteDESFile

def ReadApplyXDDMFile(file_name):
    return _vsp.ReadApplyXDDMFile(file_name)
ReadApplyXDDMFile = _vsp.ReadApplyXDDMFile

def WriteXDDMFile(file_name):
    return _vsp.WriteXDDMFile(file_name)
WriteXDDMFile = _vsp.WriteXDDMFile

def GetNumDesignVars():
    return _vsp.GetNumDesignVars()
GetNumDesignVars = _vsp.GetNumDesignVars

def AddDesignVar(parm_id, type):
    return _vsp.AddDesignVar(parm_id, type)
AddDesignVar = _vsp.AddDesignVar

def DeleteAllDesignVars():
    return _vsp.DeleteAllDesignVars()
DeleteAllDesignVars = _vsp.DeleteAllDesignVars

def GetDesignVar(index):
    return _vsp.GetDesignVar(index)
GetDesignVar = _vsp.GetDesignVar

def GetDesignVarType(index):
    return _vsp.GetDesignVarType(index)
GetDesignVarType = _vsp.GetDesignVarType

def SetComputationFileName(file_type, file_name):
    return _vsp.SetComputationFileName(file_type, file_name)
SetComputationFileName = _vsp.SetComputationFileName

def ComputeMassProps(set, num_slices):
    return _vsp.ComputeMassProps(set, num_slices)
ComputeMassProps = _vsp.ComputeMassProps

def ComputeCompGeom(set, half_mesh, file_export_types):
    return _vsp.ComputeCompGeom(set, half_mesh, file_export_types)
ComputeCompGeom = _vsp.ComputeCompGeom

def ComputePlaneSlice(set, num_slices, norm, auto_bnd, start_bnd=0, end_bnd=0):
    return _vsp.ComputePlaneSlice(set, num_slices, norm, auto_bnd, start_bnd, end_bnd)
ComputePlaneSlice = _vsp.ComputePlaneSlice

def ComputeAwaveSlice(set, num_slices, num_rots, ang_control, comp_ang, norm, auto_bnd, start_bnd=0, end_bnd=0):
    return _vsp.ComputeAwaveSlice(set, num_slices, num_rots, ang_control, comp_ang, norm, auto_bnd, start_bnd, end_bnd)
ComputeAwaveSlice = _vsp.ComputeAwaveSlice

def ComputeDegenGeom(set, file_export_types):
    return _vsp.ComputeDegenGeom(set, file_export_types)
ComputeDegenGeom = _vsp.ComputeDegenGeom

def ComputeCFDMesh(set, file_export_types):
    return _vsp.ComputeCFDMesh(set, file_export_types)
ComputeCFDMesh = _vsp.ComputeCFDMesh

def SetCFDMeshVal(type, val):
    return _vsp.SetCFDMeshVal(type, val)
SetCFDMeshVal = _vsp.SetCFDMeshVal

def SetCFDWakeFlag(geom_id, flag):
    return _vsp.SetCFDWakeFlag(geom_id, flag)
SetCFDWakeFlag = _vsp.SetCFDWakeFlag

def DeleteAllCFDSources():
    return _vsp.DeleteAllCFDSources()
DeleteAllCFDSources = _vsp.DeleteAllCFDSources

def AddDefaultSources():
    return _vsp.AddDefaultSources()
AddDefaultSources = _vsp.AddDefaultSources

def AddCFDSource(type, geom_id, surf_index, l1, r1, u1, w1, l2=0, r2=0, u2=0, w2=0):
    return _vsp.AddCFDSource(type, geom_id, surf_index, l1, r1, u1, w1, l2, r2, u2, w2)
AddCFDSource = _vsp.AddCFDSource

def GetAllResultsNames():
    return _vsp.GetAllResultsNames()
GetAllResultsNames = _vsp.GetAllResultsNames

def GetAllDataNames(results_id):
    return _vsp.GetAllDataNames(results_id)
GetAllDataNames = _vsp.GetAllDataNames

def GetNumResults(name):
    return _vsp.GetNumResults(name)
GetNumResults = _vsp.GetNumResults

def FindResultsID(name, index=0):
    return _vsp.FindResultsID(name, index)
FindResultsID = _vsp.FindResultsID

def FindLatestResultsID(name):
    return _vsp.FindLatestResultsID(name)
FindLatestResultsID = _vsp.FindLatestResultsID

def GetNumData(results_id, data_name):
    return _vsp.GetNumData(results_id, data_name)
GetNumData = _vsp.GetNumData

def GetIntResults(id, name, index=0):
    return _vsp.GetIntResults(id, name, index)
GetIntResults = _vsp.GetIntResults

def GetDoubleResults(id, name, index=0):
    return _vsp.GetDoubleResults(id, name, index)
GetDoubleResults = _vsp.GetDoubleResults

def GetStringResults(id, name, index=0):
    return _vsp.GetStringResults(id, name, index)
GetStringResults = _vsp.GetStringResults

def GetVec3dResults(id, name, index=0):
    return _vsp.GetVec3dResults(id, name, index)
GetVec3dResults = _vsp.GetVec3dResults

def CreateGeomResults(geom_id, name):
    return _vsp.CreateGeomResults(geom_id, name)
CreateGeomResults = _vsp.CreateGeomResults

def DeleteAllResults():
    return _vsp.DeleteAllResults()
DeleteAllResults = _vsp.DeleteAllResults

def DeleteResult(id):
    return _vsp.DeleteResult(id)
DeleteResult = _vsp.DeleteResult

def WriteResultsCSVFile(id, file_name):
    return _vsp.WriteResultsCSVFile(id, file_name)
WriteResultsCSVFile = _vsp.WriteResultsCSVFile

def StartGui():
    return _vsp.StartGui()
StartGui = _vsp.StartGui

def GetGeomTypes():
    return _vsp.GetGeomTypes()
GetGeomTypes = _vsp.GetGeomTypes

def AddGeom(*args):
    return _vsp.AddGeom(*args)
AddGeom = _vsp.AddGeom

def CutGeomToClipboard(geom_id):
    return _vsp.CutGeomToClipboard(geom_id)
CutGeomToClipboard = _vsp.CutGeomToClipboard

def CopyGeomToClipboard(geom_id):
    return _vsp.CopyGeomToClipboard(geom_id)
CopyGeomToClipboard = _vsp.CopyGeomToClipboard

def PasteGeomClipboard(*args):
    return _vsp.PasteGeomClipboard(*args)
PasteGeomClipboard = _vsp.PasteGeomClipboard

def FindGeoms():
    return _vsp.FindGeoms()
FindGeoms = _vsp.FindGeoms

def FindGeomsWithName(name):
    return _vsp.FindGeomsWithName(name)
FindGeomsWithName = _vsp.FindGeomsWithName

def FindGeom(name, index):
    return _vsp.FindGeom(name, index)
FindGeom = _vsp.FindGeom

def SetGeomName(geom_id, name):
    return _vsp.SetGeomName(geom_id, name)
SetGeomName = _vsp.SetGeomName

def GetGeomName(geom_id):
    return _vsp.GetGeomName(geom_id)
GetGeomName = _vsp.GetGeomName

def GetGeomParmIDs(geom_id):
    return _vsp.GetGeomParmIDs(geom_id)
GetGeomParmIDs = _vsp.GetGeomParmIDs

def GetParm(geom_id, name, group):
    return _vsp.GetParm(geom_id, name, group)
GetParm = _vsp.GetParm

def GetNumXSecSurfs(geom_id):
    return _vsp.GetNumXSecSurfs(geom_id)
GetNumXSecSurfs = _vsp.GetNumXSecSurfs

def GetNumMainSurfs(geom_id):
    return _vsp.GetNumMainSurfs(geom_id)
GetNumMainSurfs = _vsp.GetNumMainSurfs

def AddSubSurf(geom_id, type):
    return _vsp.AddSubSurf(geom_id, type)
AddSubSurf = _vsp.AddSubSurf

def GetSubSurf(geom_id, index):
    return _vsp.GetSubSurf(geom_id, index)
GetSubSurf = _vsp.GetSubSurf

def DeleteSubSurf(geom_id, sub_id):
    return _vsp.DeleteSubSurf(geom_id, sub_id)
DeleteSubSurf = _vsp.DeleteSubSurf

def CutXSec(geom_id, index):
    return _vsp.CutXSec(geom_id, index)
CutXSec = _vsp.CutXSec

def CopyXSec(geom_id, index):
    return _vsp.CopyXSec(geom_id, index)
CopyXSec = _vsp.CopyXSec

def PasteXSec(geom_id, index):
    return _vsp.PasteXSec(geom_id, index)
PasteXSec = _vsp.PasteXSec

def InsertXSec(geom_id, index, type):
    return _vsp.InsertXSec(geom_id, index, type)
InsertXSec = _vsp.InsertXSec

def SetDriverGroup(geom_id, section_index, driver_0, driver_1, driver_2):
    return _vsp.SetDriverGroup(geom_id, section_index, driver_0, driver_1, driver_2)
SetDriverGroup = _vsp.SetDriverGroup

def GetXSecSurf(geom_id, index):
    return _vsp.GetXSecSurf(geom_id, index)
GetXSecSurf = _vsp.GetXSecSurf

def GetNumXSec(xsec_surf_id):
    return _vsp.GetNumXSec(xsec_surf_id)
GetNumXSec = _vsp.GetNumXSec

def GetXSec(xsec_surf_id, xsec_index):
    return _vsp.GetXSec(xsec_surf_id, xsec_index)
GetXSec = _vsp.GetXSec

def ChangeXSecShape(xsec_surf_id, xsec_index, type):
    return _vsp.ChangeXSecShape(xsec_surf_id, xsec_index, type)
ChangeXSecShape = _vsp.ChangeXSecShape

def SetXSecSurfGlobalXForm(xsec_surf_id, mat):
    return _vsp.SetXSecSurfGlobalXForm(xsec_surf_id, mat)
SetXSecSurfGlobalXForm = _vsp.SetXSecSurfGlobalXForm

def GetXSecSurfGlobalXForm(xsec_surf_id):
    return _vsp.GetXSecSurfGlobalXForm(xsec_surf_id)
GetXSecSurfGlobalXForm = _vsp.GetXSecSurfGlobalXForm

def GetXSecShape(xsec_id):
    return _vsp.GetXSecShape(xsec_id)
GetXSecShape = _vsp.GetXSecShape

def GetXSecWidth(xsec_id):
    return _vsp.GetXSecWidth(xsec_id)
GetXSecWidth = _vsp.GetXSecWidth

def GetXSecHeight(xsec_id):
    return _vsp.GetXSecHeight(xsec_id)
GetXSecHeight = _vsp.GetXSecHeight

def SetXSecWidthHeight(xsec_id, w, h):
    return _vsp.SetXSecWidthHeight(xsec_id, w, h)
SetXSecWidthHeight = _vsp.SetXSecWidthHeight

def GetXSecParmIDs(xsec_id):
    return _vsp.GetXSecParmIDs(xsec_id)
GetXSecParmIDs = _vsp.GetXSecParmIDs

def GetXSecParm(xsec_id, name):
    return _vsp.GetXSecParm(xsec_id, name)
GetXSecParm = _vsp.GetXSecParm

def ReadFileXSec(xsec_id, file_name):
    return _vsp.ReadFileXSec(xsec_id, file_name)
ReadFileXSec = _vsp.ReadFileXSec

def SetXSecPnts(xsec_id, pnt_vec):
    return _vsp.SetXSecPnts(xsec_id, pnt_vec)
SetXSecPnts = _vsp.SetXSecPnts

def ComputeXSecPnt(xsec_id, fract):
    return _vsp.ComputeXSecPnt(xsec_id, fract)
ComputeXSecPnt = _vsp.ComputeXSecPnt

def ComputeXSecTan(xsec_id, fract):
    return _vsp.ComputeXSecTan(xsec_id, fract)
ComputeXSecTan = _vsp.ComputeXSecTan

def ResetXSecSkinParms(xsec_id):
    return _vsp.ResetXSecSkinParms(xsec_id)
ResetXSecSkinParms = _vsp.ResetXSecSkinParms

def SetXSecContinuity(xsec_id, cx):
    return _vsp.SetXSecContinuity(xsec_id, cx)
SetXSecContinuity = _vsp.SetXSecContinuity

def SetXSecTanAngles(xsec_id, side, top, right, bottom, left):
    return _vsp.SetXSecTanAngles(xsec_id, side, top, right, bottom, left)
SetXSecTanAngles = _vsp.SetXSecTanAngles

def SetXSecTanSlews(xsec_id, side, top, right, bottom, left):
    return _vsp.SetXSecTanSlews(xsec_id, side, top, right, bottom, left)
SetXSecTanSlews = _vsp.SetXSecTanSlews

def SetXSecTanStrengths(xsec_id, side, top, right, bottom, left):
    return _vsp.SetXSecTanStrengths(xsec_id, side, top, right, bottom, left)
SetXSecTanStrengths = _vsp.SetXSecTanStrengths

def SetXSecCurvatures(xsec_id, side, top, right, bottom, left):
    return _vsp.SetXSecCurvatures(xsec_id, side, top, right, bottom, left)
SetXSecCurvatures = _vsp.SetXSecCurvatures

def ReadFileAirfoil(xsec_id, file_name):
    return _vsp.ReadFileAirfoil(xsec_id, file_name)
ReadFileAirfoil = _vsp.ReadFileAirfoil

def SetAirfoilPnts(xsec_id, up_pnt_vec, low_pnt_vec):
    return _vsp.SetAirfoilPnts(xsec_id, up_pnt_vec, low_pnt_vec)
SetAirfoilPnts = _vsp.SetAirfoilPnts

def GetAirfoilUpperPnts(xsec_id):
    return _vsp.GetAirfoilUpperPnts(xsec_id)
GetAirfoilUpperPnts = _vsp.GetAirfoilUpperPnts

def GetAirfoilLowerPnts(xsec_id):
    return _vsp.GetAirfoilLowerPnts(xsec_id)
GetAirfoilLowerPnts = _vsp.GetAirfoilLowerPnts

def GetUpperCSTCoefs(xsec_id):
    return _vsp.GetUpperCSTCoefs(xsec_id)
GetUpperCSTCoefs = _vsp.GetUpperCSTCoefs

def GetLowerCSTCoefs(xsec_id):
    return _vsp.GetLowerCSTCoefs(xsec_id)
GetLowerCSTCoefs = _vsp.GetLowerCSTCoefs

def GetUpperCSTDegree(xsec_id):
    return _vsp.GetUpperCSTDegree(xsec_id)
GetUpperCSTDegree = _vsp.GetUpperCSTDegree

def GetLowerCSTDegree(xsec_id):
    return _vsp.GetLowerCSTDegree(xsec_id)
GetLowerCSTDegree = _vsp.GetLowerCSTDegree

def SetUpperCST(xsec_id, deg, coefs):
    return _vsp.SetUpperCST(xsec_id, deg, coefs)
SetUpperCST = _vsp.SetUpperCST

def SetLowerCST(xsec_id, deg, coefs):
    return _vsp.SetLowerCST(xsec_id, deg, coefs)
SetLowerCST = _vsp.SetLowerCST

def PromoteCSTUpper(xsec_id):
    return _vsp.PromoteCSTUpper(xsec_id)
PromoteCSTUpper = _vsp.PromoteCSTUpper

def PromoteCSTLower(xsec_id):
    return _vsp.PromoteCSTLower(xsec_id)
PromoteCSTLower = _vsp.PromoteCSTLower

def DemoteCSTUpper(xsec_id):
    return _vsp.DemoteCSTUpper(xsec_id)
DemoteCSTUpper = _vsp.DemoteCSTUpper

def DemoteCSTLower(xsec_id):
    return _vsp.DemoteCSTLower(xsec_id)
DemoteCSTLower = _vsp.DemoteCSTLower

def FitAfCST(xsec_surf_id, xsec_index, deg):
    return _vsp.FitAfCST(xsec_surf_id, xsec_index, deg)
FitAfCST = _vsp.FitAfCST

def GetNumSets():
    return _vsp.GetNumSets()
GetNumSets = _vsp.GetNumSets

def SetSetName(index, name):
    return _vsp.SetSetName(index, name)
SetSetName = _vsp.SetSetName

def GetSetName(index):
    return _vsp.GetSetName(index)
GetSetName = _vsp.GetSetName

def GetGeomSetAtIndex(index):
    return _vsp.GetGeomSetAtIndex(index)
GetGeomSetAtIndex = _vsp.GetGeomSetAtIndex

def GetGeomSet(name):
    return _vsp.GetGeomSet(name)
GetGeomSet = _vsp.GetGeomSet

def GetSetIndex(name):
    return _vsp.GetSetIndex(name)
GetSetIndex = _vsp.GetSetIndex

def GetSetFlag(geom_id, set_index):
    return _vsp.GetSetFlag(geom_id, set_index)
GetSetFlag = _vsp.GetSetFlag

def SetSetFlag(geom_id, set_index, flag):
    return _vsp.SetSetFlag(geom_id, set_index, flag)
SetSetFlag = _vsp.SetSetFlag

def ValidParm(id):
    return _vsp.ValidParm(id)
ValidParm = _vsp.ValidParm

def SetParmVal(*args):
    return _vsp.SetParmVal(*args)
SetParmVal = _vsp.SetParmVal

def SetParmValLimits(parm_id, val, lower_limit, upper_limit):
    return _vsp.SetParmValLimits(parm_id, val, lower_limit, upper_limit)
SetParmValLimits = _vsp.SetParmValLimits

def SetParmValUpdate(*args):
    return _vsp.SetParmValUpdate(*args)
SetParmValUpdate = _vsp.SetParmValUpdate

def GetParmVal(*args):
    return _vsp.GetParmVal(*args)
GetParmVal = _vsp.GetParmVal

def GetIntParmVal(parm_id):
    return _vsp.GetIntParmVal(parm_id)
GetIntParmVal = _vsp.GetIntParmVal

def GetBoolParmVal(parm_id):
    return _vsp.GetBoolParmVal(parm_id)
GetBoolParmVal = _vsp.GetBoolParmVal

def SetParmUpperLimit(parm_id, val):
    return _vsp.SetParmUpperLimit(parm_id, val)
SetParmUpperLimit = _vsp.SetParmUpperLimit

def GetParmUpperLimit(parm_id):
    return _vsp.GetParmUpperLimit(parm_id)
GetParmUpperLimit = _vsp.GetParmUpperLimit

def SetParmLowerLimit(parm_id, val):
    return _vsp.SetParmLowerLimit(parm_id, val)
SetParmLowerLimit = _vsp.SetParmLowerLimit

def GetParmLowerLimit(parm_id):
    return _vsp.GetParmLowerLimit(parm_id)
GetParmLowerLimit = _vsp.GetParmLowerLimit

def GetParmType(parm_id):
    return _vsp.GetParmType(parm_id)
GetParmType = _vsp.GetParmType

def GetParmName(parm_id):
    return _vsp.GetParmName(parm_id)
GetParmName = _vsp.GetParmName

def GetParmGroupName(parm_id):
    return _vsp.GetParmGroupName(parm_id)
GetParmGroupName = _vsp.GetParmGroupName

def GetParmDisplayGroupName(parm_id):
    return _vsp.GetParmDisplayGroupName(parm_id)
GetParmDisplayGroupName = _vsp.GetParmDisplayGroupName

def GetParmContainer(parm_id):
    return _vsp.GetParmContainer(parm_id)
GetParmContainer = _vsp.GetParmContainer

def SetParmDescript(parm_id, desc):
    return _vsp.SetParmDescript(parm_id, desc)
SetParmDescript = _vsp.SetParmDescript

def FindParm(parm_container_id, name, group):
    return _vsp.FindParm(parm_container_id, name, group)
FindParm = _vsp.FindParm

def FindContainers():
    return _vsp.FindContainers()
FindContainers = _vsp.FindContainers

def FindContainersWithName(name):
    return _vsp.FindContainersWithName(name)
FindContainersWithName = _vsp.FindContainersWithName

def FindContainer(name, index):
    return _vsp.FindContainer(name, index)
FindContainer = _vsp.FindContainer

def GetContainerName(parm_container_id):
    return _vsp.GetContainerName(parm_container_id)
GetContainerName = _vsp.GetContainerName

def FindContainerGroupNames(parm_container_id):
    return _vsp.FindContainerGroupNames(parm_container_id)
FindContainerGroupNames = _vsp.FindContainerGroupNames

def FindContainerParmIDs(parm_container_id):
    return _vsp.FindContainerParmIDs(parm_container_id)
FindContainerParmIDs = _vsp.FindContainerParmIDs

def AddVec3D(INOUT, x, y, z):
    return _vsp.AddVec3D(INOUT, x, y, z)
AddVec3D = _vsp.AddVec3D
class vec3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vec3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vec3d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["v"] = _vsp.vec3d_v_set
    __swig_getmethods__["v"] = _vsp.vec3d_v_get
    if _newclass:
        v = _swig_property(_vsp.vec3d_v_get, _vsp.vec3d_v_set)
    __swig_destroy__ = _vsp.delete_vec3d
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _vsp.new_vec3d(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def set_xyz(self, xx, yy, zz):
        return _vsp.vec3d_set_xyz(self, xx, yy, zz)

    def set_x(self, xx):
        return _vsp.vec3d_set_x(self, xx)

    def set_y(self, yy):
        return _vsp.vec3d_set_y(self, yy)

    def set_z(self, zz):
        return _vsp.vec3d_set_z(self, zz)

    def get_pnt(self, *args):
        return _vsp.vec3d_get_pnt(self, *args)

    def x(self):
        return _vsp.vec3d_x(self)

    def y(self):
        return _vsp.vec3d_y(self)

    def z(self):
        return _vsp.vec3d_z(self)

    def data(self):
        return _vsp.vec3d_data(self)

    def rotate_x(self, cos_alpha, sin_alpha):
        return _vsp.vec3d_rotate_x(self, cos_alpha, sin_alpha)

    def rotate_y(self, cos_alpha, sin_alpha):
        return _vsp.vec3d_rotate_y(self, cos_alpha, sin_alpha)

    def rotate_z(self, cos_alpha, sin_alpha):
        return _vsp.vec3d_rotate_z(self, cos_alpha, sin_alpha)

    def scale_x(self, scale):
        return _vsp.vec3d_scale_x(self, scale)

    def scale_y(self, scale):
        return _vsp.vec3d_scale_y(self, scale)

    def scale_z(self, scale):
        return _vsp.vec3d_scale_z(self, scale)

    def offset_x(self, offset):
        return _vsp.vec3d_offset_x(self, offset)

    def offset_y(self, offset):
        return _vsp.vec3d_offset_y(self, offset)

    def offset_z(self, offset):
        return _vsp.vec3d_offset_z(self, offset)

    def rotate_z_zero_x(self, cos_alpha, sin_alpha):
        return _vsp.vec3d_rotate_z_zero_x(self, cos_alpha, sin_alpha)

    def rotate_z_zero_y(self, cos_alpha, sin_alpha):
        return _vsp.vec3d_rotate_z_zero_y(self, cos_alpha, sin_alpha)

    def reflect_xy(self):
        return _vsp.vec3d_reflect_xy(self)

    def reflect_xz(self):
        return _vsp.vec3d_reflect_xz(self)

    def reflect_yz(self):
        return _vsp.vec3d_reflect_yz(self)

    def mag(self):
        return _vsp.vec3d_mag(self)

    def normalize(self):
        return _vsp.vec3d_normalize(self)

    def major_comp(self):
        return _vsp.vec3d_major_comp(self)

    def minor_comp(self):
        return _vsp.vec3d_minor_comp(self)
vec3d_swigregister = _vsp.vec3d_swigregister
vec3d_swigregister(vec3d)
cvar = _vsp.cvar

def dist(a, b):
    return _vsp.dist(a, b)
dist = _vsp.dist

def dist_squared(a, b):
    return _vsp.dist_squared(a, b)
dist_squared = _vsp.dist_squared

def dot(a, b):
    return _vsp.dot(a, b)
dot = _vsp.dot

def cross(a, b):
    return _vsp.cross(a, b)
cross = _vsp.cross

def angle(a, b):
    return _vsp.angle(a, b)
angle = _vsp.angle

def signed_angle(a, b, ref):
    return _vsp.signed_angle(a, b, ref)
signed_angle = _vsp.signed_angle

def cos_angle(a, b):
    return _vsp.cos_angle(a, b)
cos_angle = _vsp.cos_angle

def radius_of_circle(p1, p2, p3):
    return _vsp.radius_of_circle(p1, p2, p3)
radius_of_circle = _vsp.radius_of_circle

def center_of_circle(p1, p2, p3, center):
    return _vsp.center_of_circle(p1, p2, p3, center)
center_of_circle = _vsp.center_of_circle

def dist_pnt_2_plane(org, norm, pnt):
    return _vsp.dist_pnt_2_plane(org, norm, pnt)
dist_pnt_2_plane = _vsp.dist_pnt_2_plane

def dist_pnt_2_line(line_pt1, line_pt2, pnt):
    return _vsp.dist_pnt_2_line(line_pt1, line_pt2, pnt)
dist_pnt_2_line = _vsp.dist_pnt_2_line

def proj_pnt_on_line_seg(line_pt1, line_pt2, pnt):
    return _vsp.proj_pnt_on_line_seg(line_pt1, line_pt2, pnt)
proj_pnt_on_line_seg = _vsp.proj_pnt_on_line_seg

def proj_pnt_on_ray(line_pt1, line_pt2, pnt):
    return _vsp.proj_pnt_on_ray(line_pt1, line_pt2, pnt)
proj_pnt_on_ray = _vsp.proj_pnt_on_ray

def proj_pnt_on_line(line_pt1, line_pt2, pnt):
    return _vsp.proj_pnt_on_line(line_pt1, line_pt2, pnt)
proj_pnt_on_line = _vsp.proj_pnt_on_line

def proj_pnt_to_plane(org, plane_ln1, plane_ln2, pnt):
    return _vsp.proj_pnt_to_plane(org, plane_ln1, plane_ln2, pnt)
proj_pnt_to_plane = _vsp.proj_pnt_to_plane

def tri_seg_intersect(A, B, C, D, E, u, w, t):
    return _vsp.tri_seg_intersect(A, B, C, D, E, u, w, t)
tri_seg_intersect = _vsp.tri_seg_intersect

def tri_ray_intersect(A, B, C, D, E, u, w, t):
    return _vsp.tri_ray_intersect(A, B, C, D, E, u, w, t)
tri_ray_intersect = _vsp.tri_ray_intersect

def plane_ray_intersect(*args):
    return _vsp.plane_ray_intersect(*args)
plane_ray_intersect = _vsp.plane_ray_intersect

def ray_ray_intersect(A, B, C, D, int_pnt1, int_pnt2):
    return _vsp.ray_ray_intersect(A, B, C, D, int_pnt1, int_pnt2)
ray_ray_intersect = _vsp.ray_ray_intersect

def tetra_volume(A, B, C):
    return _vsp.tetra_volume(A, B, C)
tetra_volume = _vsp.tetra_volume

def area(A, B, C):
    return _vsp.area(A, B, C)
area = _vsp.area

def poly_area(pnt_vec):
    return _vsp.poly_area(pnt_vec)
poly_area = _vsp.poly_area

def dist3D_Segment_to_Segment(*args):
    return _vsp.dist3D_Segment_to_Segment(*args)
dist3D_Segment_to_Segment = _vsp.dist3D_Segment_to_Segment

def nearSegSeg(L0, L1, S0, S1, Lt, Ln, St, Sn):
    return _vsp.nearSegSeg(L0, L1, S0, S1, Lt, Ln, St, Sn)
nearSegSeg = _vsp.nearSegSeg

def pointLineDistSquared(p, lp0, lp1, t):
    return _vsp.pointLineDistSquared(p, lp0, lp1, t)
pointLineDistSquared = _vsp.pointLineDistSquared

def pointSegDistSquared(p, sp0, sp1, t):
    return _vsp.pointSegDistSquared(p, sp0, sp1, t)
pointSegDistSquared = _vsp.pointSegDistSquared

def point_on_line(lp0, lp1, t):
    return _vsp.point_on_line(lp0, lp1, t)
point_on_line = _vsp.point_on_line

def MapToPlane(p, planeOrig, planeVec1, planeVec2):
    return _vsp.MapToPlane(p, planeOrig, planeVec1, planeVec2)
MapToPlane = _vsp.MapToPlane

def MapFromPlane(uw, planeOrig, planeVec1, planeVec2):
    return _vsp.MapFromPlane(uw, planeOrig, planeVec1, planeVec2)
MapFromPlane = _vsp.MapFromPlane

def plane_half_space(planeOrig, planeNorm, pnt):
    return _vsp.plane_half_space(planeOrig, planeNorm, pnt)
plane_half_space = _vsp.plane_half_space

def line_line_intersect(p1, p2, p3, p4, s, t):
    return _vsp.line_line_intersect(p1, p2, p3, p4, s, t)
line_line_intersect = _vsp.line_line_intersect

def RotateArbAxis(p, theta, r):
    return _vsp.RotateArbAxis(p, theta, r)
RotateArbAxis = _vsp.RotateArbAxis

def BarycentricWeights(v0, v1, v2, p):
    return _vsp.BarycentricWeights(v0, v1, v2, p)
BarycentricWeights = _vsp.BarycentricWeights

def BilinearWeights(p0, p1, p, weights):
    return _vsp.BilinearWeights(p0, p1, p, weights)
BilinearWeights = _vsp.BilinearWeights

# This file is compatible with both classic and new-style classes.


