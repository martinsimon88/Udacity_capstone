from kulfanCST import *
import matplotlib.pyplot as plt
import random
import numpy as np
import os
import subprocess as sp
import string
from Gen2Airfoil import *

xfoilpath = r'xfoil'
# if airfoil is defined by Bezier:
#  LEU = Leading edge up            LED = Leading edge down
#  C25 = Camber at 25%              T25 = Camber at 25%
#  C50 = Camber at 50%              T50 = Camber at 50%
#  C75 = Camber at 75%              T75 = Camber at 75%
#              LEU   LED     C25   C50    C75      T25   T50   T75
#also max and min is for testing Bezier
genmaxs = [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2] # change back
genmins = [0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02] #change back
ngen= len (genmaxs)

#if airfoil is CST:
#actions = [LEU, U1, U2, TEU, LED, D1, D2, TED]
#BOUND_LOW, BOUND_UP = [0.1, 0.1, 0, 0.1, -0.5, 0.1, 0.1, 0.1], [0.5, 1, 1, 1, -0.1, 1, 1, 1]

class XFoilGame():

    def __init__(self):
        self.iteration = [0,0,0,0,0,0,0,0]
        self.Re = 300000
        self.M = [0.04, 0.1]
        self.NoIter = 200
        self.Ncrit = 9.0
        self.foilnum = 0
        self.airfoilModel = 'CST' #'CST' #'Bezier'

    def newGame(self, variables):
        if self.airfoilModel == 'CST':
            os.chdir("/home/simonx/Documents/Udacity/Projects/capstone/testingRoom/DEAPNSGA2XFoil/Archive/CST/")
        else:
            os.chdir("/home/simonx/Documents/Udacity/Projects/capstone/testingRoom/DEAPNSGA2XFoil/Archive/Bezier/")
        #check archive for latest results
        self.checkArchive()
        #update
        self.iteration = variables
        self.foilnum += 1
        name = '%06d' %self.foilnum

        if self.airfoilModel=='CST':
            kCST=CST_shape()
            kCST2=kCST.initialize(name,variables)

        elif self.airfoilModel=='Bezier':
            self.check_range(variables)
            gen2airfoil(name, variables)
        else:
            print "airfoil model not selected"

        self.Xfoil(name,self.Ncrit,self.Re, self.M, self.NoIter)
        self.writeArchiveBase(name, self.M, variables)
        return self.getObjectiveValues(name, self.M)

    def checkArchive(self):
        filelist = [f for f in os.listdir(".") if f.endswith(".dat")]
        if filelist:
            # check which is last foil number
            w = open("allVariables.log", 'r')
            for line in w:
                x = line
            self.foilnum = int(x[:6])
            w.close()
        else:
            self.foilnum = 0

    def check_range(self, gen):
        #Check if Bezier Curve is within boundaries
        for i in range(0,ngen):
            if(gen[i]>genmaxs[i]):
                gen[i]=genmaxs[i]
            if(gen[i]<genmins[i]):
                gen[i]=genmins[i]

    def Xfoil(self, name, Ncrit, Re, M, NoIter):

        for n in range(0, len(M)):
            print M[n]

            def Cmd(cmd):
                ps.stdin.write(cmd + '\n')
            try:
                os.remove(name + '.log')
            except:
                pass
            # run xfoil
            ps = sp.Popen(xfoilpath, stdin=sp.PIPE, stderr=sp.PIPE, stdout=sp.PIPE)
            ps.stderr.close()
            # comand part
            Cmd('load ' + name + '.dat')
            #Cmd('SAVE ' + name +'.txt')
            Cmd('OPER')
            Cmd('ITER')
            Cmd('Vpar' + str(NoIter))
            Cmd('N ' + str(Ncrit))
            Cmd(' ')
            Cmd('visc ' + str(Re))
            Cmd('M ' + str(M[n]))
            Cmd('PACC')
            Cmd(name + "M" + str(M[n]) + '.log')  # output file
            Cmd(' ')  # no dump file
            Cmd('aseq 0 15 1')
            Cmd(' ')  # escape OPER
            Cmd('quit')  # exit
            resp = ps.stdout.read()
            #    print "resp:",resp   # console ouput for debug
            #    ps.stdout.close()
            #    ps.stdin.close()
            #    ps.wait()
            # while (ps.returncode() == None):
            #    time.sleep(1)
            # ps.kill()


    def writeArchiveBase(self, name, M, variables):

        filename = name + "M" + str(M[0]) + ".log"
        f = open(filename, 'r')
        flines = f.readlines()
        archive = open('allResults.log', 'a')
        for i in range(12,len(flines)):
            archive.write(filename + str(flines[i]))
        archive.close()
        logVariables = open('allVariables.log', 'a')
        logVariables.write(name + "    " + "    ".join(map(str, variables)) + '\n')


    def getObjectiveValues(self, name, M):
        #Get max Lift versus Drag at Mach 0.04
        filename = name + "M" + str(M[0]) + ".log"
        f = open(filename, 'r')
        flines = f.readlines()
        Lmax = 0
        objectiveValues = []
        LL = 0
        DD = 1
        for i in range(12, len(flines)):
            # print flines[i]
            words = string.split(flines[i])
            L = float(words[1])
            D =  float(words[2])
            if (L/D > Lmax and L >1.8):
                Lmax = L/D
                LL = L
                DD = D

        objectiveValues.append(DD)
        objectiveValues.append(-LL)

        # Get min Drag at Mach 0.1
        filename = name + "M" + str(M[1]) + ".log"
        f = open(filename, 'r')
        flines = f.readlines()
        Dmin = 1.0
        for i in range(12, len(flines)):
            # print flines[i]
            words = string.split(flines[i])
            L = float(words[1])
            D = float(words[2])
            if (D < Dmin and L >1.8):
                Dmin = D

        objectiveValues.append(Dmin)
        return objectiveValues


'''
variables = [0.5, 0.5, 0.5, 0.2, -0.1, 0.5, 0.3, 0.2] #test CST
#variables = [0.05,  0.025,    0.1,  0.1,   0.05,     0.1,  0.05,  0.025] #test Bezier

XFG = XFoilGame()
testCST = XFG.newGame(variables)
print testCST
'''
